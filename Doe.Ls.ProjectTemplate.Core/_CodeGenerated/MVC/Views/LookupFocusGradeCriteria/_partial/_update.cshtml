  
@using Doe.Ls.EntityBase.MVCExtensions
@model LookupFocusGradeCriteria
@{
    var user = ViewBagWrapper.UserInfoExtensionBag.GetCurrentUser(ViewData);
    var task = ViewBagWrapper.TaskBag.GetCurrentTask(ViewData); 
    var formMethod = ViewBagWrapper.FormOperations.GetFormMethod(ViewData);
    
    var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
    var requestType = ViewBagWrapper.FormOperations.GetRequestType(ViewData);
        var focusItems = ViewBagWrapper.ListBag.GetList("focusItems",ViewData);
    var gradeItems = ViewBagWrapper.ListBag.GetList("gradeItems",ViewData);
    var selectionCriteriaItems = ViewBagWrapper.ListBag.GetList("selectionCriteriaItems",ViewData);
    
}
@Html.AntiForgeryToken()
      

@Html.HiddenFor(model => model.LookupId)
@if(formType==FormType.Edit)  {
    <div class="form-group @GetFormGroupClass("LookupId")">
        <label class="col-lg-4 ">@Html.DisplayNameFor(model => model.LookupId) </label>
        <div class="col-lg-8">            <p class="form-control-plaintext">@Html.DisplayFor(model => model.LookupId)</p>        </div>
    </div>
}                       
      





 <div class="form-group @GetFormGroupClass("FocusId")">
  <label for="FocusId" class="col-lg-4">@Html.DisplayNameFor(model => model.Focus) <span class="mandatory">*</span></label>
  @Html.DropDownList("FocusId", focusItems , "Select Focus ...", new {id="FocusId", @class = "form-control col-lg-8 select2picker", Required="Required" })      
</div>
      





 <div class="form-group @GetFormGroupClass("GradeCode")">
  <label for="GradeCode" class="col-lg-4">@Html.DisplayNameFor(model => model.Grade) <span class="mandatory">*</span></label>
  @Html.DropDownList("GradeCode", gradeItems , "Select Grade ...", new {id="GradeCode", @class = "form-control col-lg-8 select2picker", Required="Required" })      
</div>
      





 <div class="form-group @GetFormGroupClass("SelectionCriteriaId")">
  <label for="SelectionCriteriaId" class="col-lg-4">@Html.DisplayNameFor(model => model.SelectionCriteria) <span class="mandatory">*</span></label>
  @Html.DropDownList("SelectionCriteriaId", selectionCriteriaItems , "Select Selection criteria ...", new {id="SelectionCriteriaId", @class = "form-control col-lg-8 select2picker", Required="Required" })      
</div>
      



 <div class="form-group @GetFormGroupClass("LastUpdatedDate")">
  <label for="LastUpdatedDate" class="col-lg-4">@Html.DisplayNameFor(model => model.LastUpdatedDate) <span class="mandatory">*</span></label>
  <input type="date" name="LastUpdatedDate" id="LastUpdatedDate" class="form-control col-lg-8" placeholder="e.g. Last updated date" value="@Model.LastUpdatedDate"@ReadOnly("LastUpdatedDate")  required data-fv-notempty-message='The Last updated date is required'  data-fv-date-format="DD/MM/YYYY"   /> 
</div>
      



 <div class="form-group @GetFormGroupClass("LastUpdatedBy")">
  <label for="LastUpdatedBy" class="col-lg-4">@Html.DisplayNameFor(model => model.LastUpdatedBy) <span class="mandatory">*</span></label>
  <input type="text" name="LastUpdatedBy" id="LastUpdatedBy" class="form-control col-lg-8" placeholder="e.g. Last updated by" value="@Model.LastUpdatedBy"@ReadOnly("LastUpdatedBy")  required data-fv-notempty-message='The Last updated by is required'     /> 
</div>
      


  <div class="form-check">
            <label class="form-check-label">
                <input class="form-check-input"  type="checkbox" name="IsMandatory" id="IsMandatory" checked="@Model.IsMandatory" @ReadOnly("IsMandatory")/>
            </label>
        </div>    
 
  
@functions
{
    bool IsKey(string propertyName) 
    {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        return T4Helper.GetKeys(entityType).Any(p => p.Name == propertyName);
    }

    string ReadOnly(string propertyName) 
    {
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        if (formType == FormType.Edit && IsKey(propertyName)) return "readonly";

        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        
        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>(prop, entityType);
        if (computedAttribute == null) return string.Empty;

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "readonly";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "readonly";

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "readonly";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "readonly";
        
        return string.Empty;
    }

    string GetFormGroupClass(string propertyName) 
    {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>(prop, entityType);
        if (computedAttribute == null) return string.Empty;

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "hidden";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "hidden";

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "hidden";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "hidden";

        switch (formType)
        {
            case FormType.Create:
            {
                if (computedAttribute.ComputedPropertyType == ComputedPropertyType.Status) return "hidden";
                if (computedAttribute.ComputedPropertyType == ComputedPropertyType.AutoIncrement) return "hidden";
                if (computedAttribute.ComputedPropertyType == ComputedPropertyType.Computed) return "hidden";
                break;
            }
        }
        return string.Empty;        
    }    
}




