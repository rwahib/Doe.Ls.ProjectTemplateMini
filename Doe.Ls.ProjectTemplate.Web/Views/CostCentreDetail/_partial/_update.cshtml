@model CostCentreDetail
@{
    var user = ViewBagWrapper.UserInfoExtensionBag.GetCurrentUser(ViewData);
    var task = ViewBagWrapper.TaskBag.GetCurrentTask(ViewData);
    var formMethod = ViewBagWrapper.FormOperations.GetFormMethod(ViewData);

    var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
    var requestType = ViewBagWrapper.FormOperations.GetRequestType(ViewData);
    var positionItems = ViewBagWrapper.ListBag.GetList("positionItems", ViewData);

}

@Html.AntiForgeryToken()

<div class="form-group @GetFormGroupClass("PositionId")">
    <label for="PositionId" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.Position) <span class="mandatory">*</span></label>

    <div class="col-lg-10">
        @Html.DropDownList("PositionId", positionItems, "Select Position ...", new { id = "PositionId", @class = "form-control select2picker", Required = "Required" })
    </div>
</div>
<div class="form-group @GetFormGroupClass("CostCentre")">
    <label for="CostCentre" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.CostCentre) </label>

    <div class="col-lg-10">
        <div class="input-group">
            
            <input type="number" name="CostCentre" id="CostCentre" class="form-control" placeholder="Please enter Cost Centre name" value="@Model.CostCentre" @ReadOnly("CostCentre") />
            
        </div>
    </div>
</div>
<div class="form-group @GetFormGroupClass("Fund")">
    <label for="Fund" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.Fund) </label>

    <div class="col-lg-10">
        <div class="input-group">
            
            <input type="number" name="Fund" id="Fund" class="form-control" placeholder="Please enter the fund" value="@Model.Fund" @ReadOnly("Fund") />
            
        </div>
    </div>
</div>
<div class="form-group @GetFormGroupClass("PayrollWBS")">
    <label for="PayrollWBS" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.PayrollWBS) </label>

    <div class="col-lg-10">
        <div class="input-group">
            
            <input type="text" name="PayrollWBS" id="PayrollWBS" class="form-control" placeholder="Please enter Payroll WBS" value="@Model.PayrollWBS" @ReadOnly("PayrollWBS") />
            
        </div>
    </div>
</div>
<div class="form-group @GetFormGroupClass("LastUpdatedDate")">
    <label for="LastUpdatedDate" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.LastUpdatedDate) <span class="mandatory">*</span></label>

    <div class="col-lg-10">
        <div class="input-group">
            
            <input type="date" name="LastUpdatedDate" id="LastUpdatedDate" class="form-control" placeholder="e.g. LastUpdatedDate" value="@Model.LastUpdatedDate" @ReadOnly("LastUpdatedDate") required data-fv-notempty-message='The Last updated date is required' data-fv-date-format="DD/MM/YYYY" />
            
        </div>
    </div>
</div>
<div class="form-group @GetFormGroupClass("LastUpdatedBy")">
    <label for="LastUpdatedBy" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.LastUpdatedBy) <span class="mandatory">*</span></label>

    <div class="col-lg-10">
        <div class="input-group">
            
            <input type="text" name="LastUpdatedBy" id="LastUpdatedBy" class="form-control" placeholder="e.g. LastUpdatedBy" value="@Model.LastUpdatedBy" @ReadOnly("LastUpdatedBy") required data-fv-notempty-message='The Last updated by is required' />
            
        </div>
    </div>
</div>


@functions
{
    bool IsKey(string propertyName)
    {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        return T4Helper.GetKeys(entityType).Any(p => p.Name == propertyName);
    }

    string ReadOnly(string propertyName)
    {
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        if (formType == FormType.Edit && IsKey(propertyName)) return "readonly";

        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);

        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>(prop, entityType);
        if (computedAttribute == null) return string.Empty;

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "readonly";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "readonly";

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "readonly";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "readonly";

        return string.Empty;
    }

    string GetFormGroupClass(string propertyName)
    {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>(prop, entityType);
        if (computedAttribute == null) return string.Empty;

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "hidden";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "hidden";

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "hidden";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "hidden";

        switch (formType)
        {
            case FormType.Create:
                {
                    if (computedAttribute.ComputedPropertyType == ComputedPropertyType.Status) return "hidden";
                    if (computedAttribute.ComputedPropertyType == ComputedPropertyType.AutoIncrement) return "hidden";
                    if (computedAttribute.ComputedPropertyType == ComputedPropertyType.Computed) return "hidden";
                    break;
                }
        }
        return string.Empty;
    }
}
