@using Doe.Ls.EntityBase.MVCExtensions
@model RoleDescription
@{
    var user = ViewBagWrapper.UserInfoExtensionBag.GetCurrentUser(ViewData);
    var task = ViewBagWrapper.TaskBag.GetCurrentTask(ViewData); 
    var formMethod = ViewBagWrapper.FormOperations.GetFormMethod(ViewData);
    
    var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
    var requestType = ViewBagWrapper.FormOperations.GetRequestType(ViewData);
        var rolePositionDescriptionItems = ViewBagWrapper.ListBag.GetList("rolePositionDescriptionItems",ViewData);
    
}
@Html.AntiForgeryToken()
                                    

                          <div class="form-group @GetFormGroupClass("Cluster")">
  <label for="Cluster" class="col-lg-4">@Html.DisplayNameFor(model => model.Cluster) </label>
  <input type="text" name="Cluster" id="Cluster" class="form-control col-lg-8" placeholder="e.g. Cluster" value="@Model.Cluster"@ReadOnly("Cluster")       /> 
</div>
                                    

                          <div class="form-group @GetFormGroupClass("ANZSCOCode")">
  <label for="ANZSCOCode" class="col-lg-4">@Html.DisplayNameFor(model => model.ANZSCOCode) </label>
  <input type="text" name="ANZSCOCode" id="ANZSCOCode" class="form-control col-lg-8" placeholder="e.g. A n z s c o code" value="@Model.ANZSCOCode"@ReadOnly("ANZSCOCode")       /> 
</div>
                         <div class="form-group @GetFormGroupClass("PCATCode")">
  <label for="PCATCode" class="col-lg-4">@Html.DisplayNameFor(model => model.PCATCode) </label>
  <input type="text" name="PCATCode" id="PCATCode" class="form-control col-lg-8" placeholder="e.g. P c a t code" value="@Model.PCATCode"@ReadOnly("PCATCode")       /> 
</div>
                                    

                          <div class="form-group @GetFormGroupClass("Agency")">
  <label for="Agency" class="col-lg-4">@Html.DisplayNameFor(model => model.Agency) </label>
  <input type="text" name="Agency" id="Agency" class="form-control col-lg-8" placeholder="e.g. Agency" value="@Model.Agency"@ReadOnly("Agency")       /> 
</div>
                         <div class="form-group @GetFormGroupClass("AgencyWebsite")">
  <label for="AgencyWebsite" class="col-lg-4">@Html.DisplayNameFor(model => model.AgencyWebsite) </label>
  <input type="text" name="AgencyWebsite" id="AgencyWebsite" class="form-control col-lg-8" placeholder="e.g. Agency website" value="@Model.AgencyWebsite"@ReadOnly("AgencyWebsite")       /> 
</div>
                                    

                                     

                                     

                                     

                                     

                                     

                          <div class="form-group @GetFormGroupClass("BudgetExpenditure")">
  <label for="BudgetExpenditure" class="col-lg-4">@Html.DisplayNameFor(model => model.BudgetExpenditure) </label>
  <input type="text" name="BudgetExpenditure" id="BudgetExpenditure" class="form-control col-lg-8" placeholder="e.g. Budget expenditure" value="@Model.BudgetExpenditure"@ReadOnly("BudgetExpenditure")       /> 
</div>
                         <div class="form-group @GetFormGroupClass("BudgetExpenditureValue")">
  <label for="BudgetExpenditureValue" class="col-lg-4">@Html.DisplayNameFor(model => model.BudgetExpenditureValue) </label>
  <input type="text" name="BudgetExpenditureValue" id="BudgetExpenditureValue" class="form-control col-lg-8" placeholder="e.g. Budget expenditure value" value="@Model.BudgetExpenditureValue"@ReadOnly("BudgetExpenditureValue")       /> 
</div>
                                    

                                     

                                     

                                     

                                     

                          <div class="form-group @GetFormGroupClass("LastModifiedBy")">
  <label for="LastModifiedBy" class="col-lg-4">@Html.DisplayNameFor(model => model.LastModifiedBy) </label>
  <input type="text" name="LastModifiedBy" id="LastModifiedBy" class="form-control col-lg-8" placeholder="e.g. Last modified by" value="@Model.LastModifiedBy"@ReadOnly("LastModifiedBy")       /> 
</div>
                         <div class="form-group @GetFormGroupClass("CreatedDate")">
  <label for="CreatedDate" class="col-lg-4">@Html.DisplayNameFor(model => model.CreatedDate) </label>
  <input type="date" name="CreatedDate" id="CreatedDate" class="form-control col-lg-8" placeholder="e.g. Created date" value="@Model.CreatedDate"@ReadOnly("CreatedDate")    data-fv-date-format="DD/MM/YYYY"   /> 
</div>
                         <div class="form-group @GetFormGroupClass("LastModifiedDate")">
  <label for="LastModifiedDate" class="col-lg-4">@Html.DisplayNameFor(model => model.LastModifiedDate) </label>
  <input type="date" name="LastModifiedDate" id="LastModifiedDate" class="form-control col-lg-8" placeholder="e.g. Last modified date" value="@Model.LastModifiedDate"@ReadOnly("LastModifiedDate")    data-fv-date-format="DD/MM/YYYY"   /> 
</div>
                         <div class="form-group @GetFormGroupClass("CreatedBy")">
  <label for="CreatedBy" class="col-lg-4">@Html.DisplayNameFor(model => model.CreatedBy) </label>
  <input type="text" name="CreatedBy" id="CreatedBy" class="form-control col-lg-8" placeholder="e.g. Created by" value="@Model.CreatedBy"@ReadOnly("CreatedBy")       /> 
</div>
                         <div class="form-group @GetFormGroupClass("VersionStatus")">
  <label for="VersionStatus" class="col-lg-4">@Html.DisplayNameFor(model => model.VersionStatus) </label>
  <input type="text" name="VersionStatus" id="VersionStatus" class="form-control col-lg-8" placeholder="e.g. Version status" value="@Model.VersionStatus"@ReadOnly("VersionStatus")       /> 
</div>
                         <div class="form-group @GetFormGroupClass("OldPDFileName")">
  <label for="OldPDFileName" class="col-lg-4">@Html.DisplayNameFor(model => model.OldPDFileName) </label>
  <input type="text" name="OldPDFileName" id="OldPDFileName" class="form-control col-lg-8" placeholder="e.g. Old p d file name" value="@Model.OldPDFileName"@ReadOnly("OldPDFileName")       /> 
</div>
                         <div class="form-group @GetFormGroupClass("ManagerRole")">
  <label for="ManagerRole" class="col-lg-4">@Html.DisplayNameFor(model => model.ManagerRole) </label>
  <input type="checkbox" name="ManagerRole" id="ManagerRole" class="form-control col-lg-8" placeholder="e.g. Manager role" value="@Model.ManagerRole"@ReadOnly("ManagerRole")       /> 
</div>
 
  
@functions
{
    bool IsKey(string propertyName) 
    {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        return T4Helper.GetKeys(entityType).Any(p => p.Name == propertyName);
    }

    string ReadOnly(string propertyName) 
    {
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        if (formType == FormType.Edit && IsKey(propertyName)) return "readonly";

        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        
        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>(prop, entityType);
        if (computedAttribute == null) return string.Empty;

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "readonly";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "readonly";

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "readonly";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "readonly";
        
        return string.Empty;
    }

    string GetFormGroupClass(string propertyName) 
    {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>(prop, entityType);
        if (computedAttribute == null) return string.Empty;

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "hidden";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "hidden";

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "hidden";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "hidden";

        switch (formType)
        {
            case FormType.Create:
            {
                if (computedAttribute.ComputedPropertyType == ComputedPropertyType.Status) return "hidden";
                if (computedAttribute.ComputedPropertyType == ComputedPropertyType.AutoIncrement) return "hidden";
                if (computedAttribute.ComputedPropertyType == ComputedPropertyType.Computed) return "hidden";
                break;
            }
        }
        return string.Empty;        
    }    
}




