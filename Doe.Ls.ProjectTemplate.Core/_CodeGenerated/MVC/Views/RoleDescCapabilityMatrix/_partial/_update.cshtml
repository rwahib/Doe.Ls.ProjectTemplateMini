  
@using Doe.Ls.EntityBase.MVCExtensions
@model RoleDescCapabilityMatrix
@{
    var user = ViewBagWrapper.UserInfoExtensionBag.GetCurrentUser(ViewData);
    var task = ViewBagWrapper.TaskBag.GetCurrentTask(ViewData); 
    var formMethod = ViewBagWrapper.FormOperations.GetFormMethod(ViewData);
    
    var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
    var requestType = ViewBagWrapper.FormOperations.GetRequestType(ViewData);
        var gradeItems = ViewBagWrapper.ListBag.GetList("gradeItems",ViewData);
    
}
@Html.AntiForgeryToken()
      





 <div class="form-group @GetFormGroupClass("GradeCode")">
  <label for="GradeCode" class="col-lg-4">@Html.DisplayNameFor(model => model.Grade) <span class="mandatory">*</span></label>
  @Html.DropDownList("GradeCode", gradeItems , "Select Grade ...", new {id="GradeCode", @class = "form-control col-lg-8 select2picker", Required="Required" })      
</div>
      



 <div class="form-group @GetFormGroupClass("Foundational_Min")">
  <label for="Foundational_Min" class="col-lg-4">@Html.DisplayNameFor(model => model.Foundational_Min) <span class="mandatory">*</span></label>
  <input type="number" name="Foundational_Min" id="Foundational_Min" class="form-control col-lg-8" placeholder="e.g. Foundational  min" value="@Model.Foundational_Min"@ReadOnly("Foundational_Min")  required data-fv-notempty-message='The Foundational  min is required'    data-fv-integer-message='The Foundational  min is not an integer' /> 
</div>
      



 <div class="form-group @GetFormGroupClass("Foundational_Max")">
  <label for="Foundational_Max" class="col-lg-4">@Html.DisplayNameFor(model => model.Foundational_Max) <span class="mandatory">*</span></label>
  <input type="number" name="Foundational_Max" id="Foundational_Max" class="form-control col-lg-8" placeholder="e.g. Foundational  max" value="@Model.Foundational_Max"@ReadOnly("Foundational_Max")  required data-fv-notempty-message='The Foundational  max is required'    data-fv-integer-message='The Foundational  max is not an integer' /> 
</div>
      



 <div class="form-group @GetFormGroupClass("Intermediate_Min")">
  <label for="Intermediate_Min" class="col-lg-4">@Html.DisplayNameFor(model => model.Intermediate_Min) <span class="mandatory">*</span></label>
  <input type="number" name="Intermediate_Min" id="Intermediate_Min" class="form-control col-lg-8" placeholder="e.g. Intermediate  min" value="@Model.Intermediate_Min"@ReadOnly("Intermediate_Min")  required data-fv-notempty-message='The Intermediate  min is required'    data-fv-integer-message='The Intermediate  min is not an integer' /> 
</div>
      



 <div class="form-group @GetFormGroupClass("Intermediate_Max")">
  <label for="Intermediate_Max" class="col-lg-4">@Html.DisplayNameFor(model => model.Intermediate_Max) <span class="mandatory">*</span></label>
  <input type="number" name="Intermediate_Max" id="Intermediate_Max" class="form-control col-lg-8" placeholder="e.g. Intermediate  max" value="@Model.Intermediate_Max"@ReadOnly("Intermediate_Max")  required data-fv-notempty-message='The Intermediate  max is required'    data-fv-integer-message='The Intermediate  max is not an integer' /> 
</div>
      



 <div class="form-group @GetFormGroupClass("Adept_Min")">
  <label for="Adept_Min" class="col-lg-4">@Html.DisplayNameFor(model => model.Adept_Min) <span class="mandatory">*</span></label>
  <input type="number" name="Adept_Min" id="Adept_Min" class="form-control col-lg-8" placeholder="e.g. Adept  min" value="@Model.Adept_Min"@ReadOnly("Adept_Min")  required data-fv-notempty-message='The Adept  min is required'    data-fv-integer-message='The Adept  min is not an integer' /> 
</div>
      



 <div class="form-group @GetFormGroupClass("Adept_Max")">
  <label for="Adept_Max" class="col-lg-4">@Html.DisplayNameFor(model => model.Adept_Max) <span class="mandatory">*</span></label>
  <input type="number" name="Adept_Max" id="Adept_Max" class="form-control col-lg-8" placeholder="e.g. Adept  max" value="@Model.Adept_Max"@ReadOnly("Adept_Max")  required data-fv-notempty-message='The Adept  max is required'    data-fv-integer-message='The Adept  max is not an integer' /> 
</div>
      



 <div class="form-group @GetFormGroupClass("Advanced_Min")">
  <label for="Advanced_Min" class="col-lg-4">@Html.DisplayNameFor(model => model.Advanced_Min) <span class="mandatory">*</span></label>
  <input type="number" name="Advanced_Min" id="Advanced_Min" class="form-control col-lg-8" placeholder="e.g. Advanced  min" value="@Model.Advanced_Min"@ReadOnly("Advanced_Min")  required data-fv-notempty-message='The Advanced  min is required'    data-fv-integer-message='The Advanced  min is not an integer' /> 
</div>
      



 <div class="form-group @GetFormGroupClass("Advanced_Max")">
  <label for="Advanced_Max" class="col-lg-4">@Html.DisplayNameFor(model => model.Advanced_Max) <span class="mandatory">*</span></label>
  <input type="number" name="Advanced_Max" id="Advanced_Max" class="form-control col-lg-8" placeholder="e.g. Advanced  max" value="@Model.Advanced_Max"@ReadOnly("Advanced_Max")  required data-fv-notempty-message='The Advanced  max is required'    data-fv-integer-message='The Advanced  max is not an integer' /> 
</div>
      



 <div class="form-group @GetFormGroupClass("HighlyAdvanced_Min")">
  <label for="HighlyAdvanced_Min" class="col-lg-4">@Html.DisplayNameFor(model => model.HighlyAdvanced_Min) <span class="mandatory">*</span></label>
  <input type="number" name="HighlyAdvanced_Min" id="HighlyAdvanced_Min" class="form-control col-lg-8" placeholder="e.g. Highly advanced  min" value="@Model.HighlyAdvanced_Min"@ReadOnly("HighlyAdvanced_Min")  required data-fv-notempty-message='The Highly advanced  min is required'    data-fv-integer-message='The Highly advanced  min is not an integer' /> 
</div>
      



 <div class="form-group @GetFormGroupClass("HighlyAdvanced_Max")">
  <label for="HighlyAdvanced_Max" class="col-lg-4">@Html.DisplayNameFor(model => model.HighlyAdvanced_Max) <span class="mandatory">*</span></label>
  <input type="number" name="HighlyAdvanced_Max" id="HighlyAdvanced_Max" class="form-control col-lg-8" placeholder="e.g. Highly advanced  max" value="@Model.HighlyAdvanced_Max"@ReadOnly("HighlyAdvanced_Max")  required data-fv-notempty-message='The Highly advanced  max is required'    data-fv-integer-message='The Highly advanced  max is not an integer' /> 
</div>
      



 <div class="form-group @GetFormGroupClass("FocusCapabilities_Min")">
  <label for="FocusCapabilities_Min" class="col-lg-4">@Html.DisplayNameFor(model => model.FocusCapabilities_Min) <span class="mandatory">*</span></label>
  <input type="number" name="FocusCapabilities_Min" id="FocusCapabilities_Min" class="form-control col-lg-8" placeholder="e.g. Focus capabilities  min" value="@Model.FocusCapabilities_Min"@ReadOnly("FocusCapabilities_Min")  required data-fv-notempty-message='The Focus capabilities  min is required'    data-fv-integer-message='The Focus capabilities  min is not an integer' /> 
</div>
      



 <div class="form-group @GetFormGroupClass("FocusCapabilities_Max")">
  <label for="FocusCapabilities_Max" class="col-lg-4">@Html.DisplayNameFor(model => model.FocusCapabilities_Max) <span class="mandatory">*</span></label>
  <input type="number" name="FocusCapabilities_Max" id="FocusCapabilities_Max" class="form-control col-lg-8" placeholder="e.g. Focus capabilities  max" value="@Model.FocusCapabilities_Max"@ReadOnly("FocusCapabilities_Max")  required data-fv-notempty-message='The Focus capabilities  max is required'    data-fv-integer-message='The Focus capabilities  max is not an integer' /> 
</div>
      




 <div class="form-group @GetFormGroupClass("Notes")">
  <label for="Notes" class="col-lg-4">@Html.DisplayNameFor(model => model.Notes) </label>
  <textarea name="Notes" id="Notes" class="form-control col-lg-8 " placeholder="e.g. Notes"     >@Model.Notes</textarea>
</div>
 
  
@functions
{
    bool IsKey(string propertyName) 
    {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        return T4Helper.GetKeys(entityType).Any(p => p.Name == propertyName);
    }

    string ReadOnly(string propertyName) 
    {
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        if (formType == FormType.Edit && IsKey(propertyName)) return "readonly";

        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        
        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>(prop, entityType);
        if (computedAttribute == null) return string.Empty;

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "readonly";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "readonly";

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "readonly";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "readonly";
        
        return string.Empty;
    }

    string GetFormGroupClass(string propertyName) 
    {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>(prop, entityType);
        if (computedAttribute == null) return string.Empty;

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "hidden";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "hidden";

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "hidden";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "hidden";

        switch (formType)
        {
            case FormType.Create:
            {
                if (computedAttribute.ComputedPropertyType == ComputedPropertyType.Status) return "hidden";
                if (computedAttribute.ComputedPropertyType == ComputedPropertyType.AutoIncrement) return "hidden";
                if (computedAttribute.ComputedPropertyType == ComputedPropertyType.Computed) return "hidden";
                break;
            }
        }
        return string.Empty;        
    }    
}




