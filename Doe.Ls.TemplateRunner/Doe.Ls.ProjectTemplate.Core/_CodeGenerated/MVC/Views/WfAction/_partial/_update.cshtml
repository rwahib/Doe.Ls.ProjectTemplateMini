@using Doe.Ls.EntityBase.MVCExtensions
@model WfAction
@{
    var user = ViewBagWrapper.UserInfoExtensionBag.GetCurrentUser(ViewData);
    var task = ViewBagWrapper.TaskBag.GetCurrentTask(ViewData); 
    var formMethod = ViewBagWrapper.FormOperations.GetFormMethod(ViewData);
    
    var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
    var requestType = ViewBagWrapper.FormOperations.GetRequestType(ViewData);
        
}
@Html.AntiForgeryToken()
                         <div class="form-group @GetFormGroupClass("WfActionId")">
  <label for="WfActionId" class="col-lg-4">@Html.DisplayNameFor(model => model.WfActionId) <span class="mandatory">*</span></label>
  <input type="number" name="WfActionId" id="WfActionId" class="form-control col-lg-8" placeholder="e.g. Wf action id" value="@Model.WfActionId"@ReadOnly("WfActionId")  required data-fv-notempty-message='The Wf action id is required'    data-fv-integer-message='The Wf action id is not an integer' /> 
</div>
                         <div class="form-group @GetFormGroupClass("WfActionName")">
  <label for="WfActionName" class="col-lg-4">@Html.DisplayNameFor(model => model.WfActionName) <span class="mandatory">*</span></label>
  <input type="text" name="WfActionName" id="WfActionName" class="form-control col-lg-8" placeholder="e.g. Wf action name" value="@Model.WfActionName"@ReadOnly("WfActionName")  required data-fv-notempty-message='The Wf action name is required'     /> 
</div>
                         <div class="form-group @GetFormGroupClass("WfActionStatus")">
  <label for="WfActionStatus" class="col-lg-4">@Html.DisplayNameFor(model => model.WfActionStatus) </label>
  <input type="text" name="WfActionStatus" id="WfActionStatus" class="form-control col-lg-8" placeholder="e.g. Wf action status" value="@Model.WfActionStatus"@ReadOnly("WfActionStatus")       /> 
</div>
                                    

  
  
@functions
{
    bool IsKey(string propertyName) 
    {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        return T4Helper.GetKeys(entityType).Any(p => p.Name == propertyName);
    }

    string ReadOnly(string propertyName) 
    {
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        if (formType == FormType.Edit && IsKey(propertyName)) return "readonly";

        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        
        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>(prop, entityType);
        if (computedAttribute == null) return string.Empty;

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "readonly";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "readonly";

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "readonly";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "readonly";
        
        return string.Empty;
    }

    string GetFormGroupClass(string propertyName) 
    {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>(prop, entityType);
        if (computedAttribute == null) return string.Empty;

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "hidden";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "hidden";

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "hidden";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "hidden";

        switch (formType)
        {
            case FormType.Create:
            {
                if (computedAttribute.ComputedPropertyType == ComputedPropertyType.Status) return "hidden";
                if (computedAttribute.ComputedPropertyType == ComputedPropertyType.AutoIncrement) return "hidden";
                if (computedAttribute.ComputedPropertyType == ComputedPropertyType.Computed) return "hidden";
                break;
            }
        }
        return string.Empty;        
    }    
}




