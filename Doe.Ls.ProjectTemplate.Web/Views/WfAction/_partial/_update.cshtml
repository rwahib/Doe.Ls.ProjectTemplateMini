@using Doe.Ls.EntityBase.MVCExtensions
@model WfAction
@{
    var user = ViewBagWrapper.UserInfoExtensionBag.GetCurrentUser(ViewData);
    var task = ViewBagWrapper.TaskBag.GetCurrentTask(ViewData);
    var formMethod = ViewBagWrapper.FormOperations.GetFormMethod(ViewData);

    var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
    var requestType = ViewBagWrapper.FormOperations.GetRequestType(ViewData);

    var adminOnly = task.User.IsAdministrator || task.User.IsPowerUser;

}

@Html.AntiForgeryToken()

<div class="form-group @GetFormGroupClass("WfActionId")">
    <label for="WfActionId" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.WfActionId) <span class="mandatory">*</span></label>

    <div class="col-lg-10">
        <div class="input-group">
            
            <input type="number" name="WfActionId" id="WfActionId" class="form-control" placeholder="e.g. WfActionId" value="@Model.WfActionId" @ReadOnly("WfActionId",adminOnly) required data-fv-notempty-message='The Workflow action id is required' data-fv-integer-message='The Workflow action id is not an integer' />
            
        </div>
    </div>
</div>
<div class="form-group @GetFormGroupClass("WfActionName")">
    <label for="WfActionName" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.WfActionName) <span class="mandatory">*</span></label>

    <div class="col-lg-10">
        <div class="input-group">
            
            <input type="text" name="WfActionName" id="WfActionName" class="form-control" placeholder="e.g. WfActionName" value="@Model.WfActionName" @ReadOnly("WfActionName",adminOnly) required data-fv-notempty-message='The Workflow action name is required' />
            
        </div>
    </div>
</div>
<div class="form-group @GetFormGroupClass("WfActionStatus")">
    <label for="WfActionStatus" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.WfActionStatus) </label>

    <div class="col-lg-10">
        <div class="input-group">
            
            <input type="text" name="WfActionStatus" id="WfActionStatus" class="form-control" placeholder="e.g. WfActionStatus" value="@Model.WfActionStatus" @ReadOnly("WfActionStatus",adminOnly) />
            
        </div>
    </div>
</div>
<div class="form-group @GetFormGroupClass("WfActionDescription")">
    <label for="WfActionDescription" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.WfActionDescription) </label>

    <div class="col-lg-10">
        <div class="input-group">
            
            <textarea name="WfActionDescription" id="WfActionDescription" class="form-control tinymce-rich" placeholder="e.g. WfActionDescription">@Model.WfActionDescription</textarea>
            
        </div>
    </div>
</div>


@functions
{
    bool IsKey(string propertyName)
        {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        return T4Helper.GetKeys(entityType).Any(p => p.Name == propertyName);
        }

    string ReadOnly(string propertyName,bool adminOnly)
    {
        if (adminOnly) return "readonly";
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        if(formType == FormType.Edit && IsKey(propertyName)) return "readonly";

        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);

        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>(prop, entityType);
        if(computedAttribute == null) return string.Empty;

        if(computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "readonly";
        if(computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "readonly";

        if(computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "readonly";
        if(computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "readonly";

        return string.Empty;
        }

    string GetFormGroupClass(string propertyName)
        {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>(prop, entityType);
        if(computedAttribute == null) return string.Empty;

        if(computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "hidden";
        if(computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "hidden";

        if(computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "hidden";
        if(computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "hidden";

        switch(formType)
            {
            case FormType.Create:
                    {
                    if(computedAttribute.ComputedPropertyType == ComputedPropertyType.Status) return "hidden";
                    if(computedAttribute.ComputedPropertyType == ComputedPropertyType.AutoIncrement) return "hidden";
                    if(computedAttribute.ComputedPropertyType == ComputedPropertyType.Computed) return "hidden";
                    break;
                    }
            }
        return string.Empty;
        }
}
