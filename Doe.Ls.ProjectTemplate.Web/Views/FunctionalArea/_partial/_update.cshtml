@model FunctionalArea
@{
    var user = ViewBagWrapper.UserInfoExtensionBag.GetCurrentUser(ViewData);
    var task = ViewBagWrapper.TaskBag.GetCurrentTask(ViewData);
    var formMethod = ViewBagWrapper.FormOperations.GetFormMethod(ViewData);

    var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
    var requestType = ViewBagWrapper.FormOperations.GetRequestType(ViewData);
    var divisionItems = ViewBagWrapper.ListBag.GetList("divisionItems", ViewData);

    var directorateItems = ViewBagWrapper.ListBag.GetList("directorateItems", ViewData);
    var statusValueItems = ViewBagWrapper.ListBag.GetList("statusValueItems", ViewData);

}

@Html.AntiForgeryToken()
@if(formType == FormType.Edit)
    {
    @Html.Hidden("ExecutiveCod", Model.Directorate.ExecutiveCod)

    }
<div class="form-group @GetFormGroupClass("FuncationalAreaId")">
    <label for="FuncationalAreaId" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.FuncationalAreaId) <span class="mandatory">*</span></label>

    <div class="col-lg-10">
        <div class="input-group">
            
            <input type="number" name="FuncationalAreaId" id="FuncationalAreaId" class="form-control" placeholder="Please enter Funcational Area Id" value="@Model.FuncationalAreaId" @ReadOnly("FuncationalAreaId") required data-fv-notempty-message='The Funcational area id is required' data-fv-integer-message='The Funcational area id is not an integer' />
            
        </div>
    </div>
</div>
<div class="form-group @GetFormGroupClass("AreanName")">
    <label for="AreanName" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.AreanName) <span class="mandatory">*</span></label>

    <div class="col-lg-10">
        <div class="input-group">
            

            <input type="text" name="AreanName" id="AreanName" class="form-control" placeholder="Please enter Area name" value="@Model.AreanName" @ReadOnly("AreanName") required data-fv-notempty-message='The Arean name is required' />

            
        </div>
    </div>
</div>
<div class="form-group @GetFormGroupClass("AreaDescription")">
    <label for="AreaDescription" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.AreaDescription) </label>

    <div class="col-lg-10">
        <div class="input-group">
            
            <textarea name="AreaDescription" id="AreaDescription" class="form-control " placeholder="Please enter area description">@Model.AreaDescription</textarea>
            
        </div>
    </div>
</div>
<div class="form-group">
    <label for="DivisionCode" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.Directorate.Executive) <span class="mandatory">*</span></label>

    <div class="col-lg-10">
        @Html.DropDownList("DivisionCode", divisionItems, "Select Division ...", new { id = "DivisionCode", @class = "form-control select2picker", Required = "Required" })
    </div>
</div>
<div class="form-group @GetFormGroupClass("DirectorateId")">
    <label for="DirectorateId" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.Directorate) <span class="mandatory">*</span></label>

    <div class="col-lg-10">
        @Html.DropDownList("DirectorateId", directorateItems, "Select Directorate ...", new { id = "DirectorateId", @class = "form-control select2picker", Required = "Required",min=1, data_fv_greaterthan_value = "1", data_fv_greaterthan_message="Select valid directorate"})
    </div>
</div>

<div class="form-group @GetFormGroupClass("AreaCustomClass")">
    <label for="AreaCustomClass" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.AreaCustomClass) </label>

    <div class="col-lg-10">
        <div class="input-group">
            
            <input type="text" name="AreaCustomClass" id="AreaCustomClass" class="form-control" placeholder="Please enter colour hex code, e.g. #cccccc" value="@Model.AreaCustomClass" @ReadOnly("AreaCustomClass") />
            
        </div>
    </div>
</div>
<div class="form-group @GetFormGroupClass("StatusId")">
    <label for="StatusId" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.StatusValue) <span class="mandatory">*</span></label>

    <div class="col-lg-10">
        @Html.DropDownList("StatusId", statusValueItems, "Select Status value ...", new { id = "StatusId", @class = "form-control select2picker", Required = "Required"})
    </div>
</div>

@functions
{
    bool IsKey(string propertyName)
        {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        return T4Helper.GetKeys(entityType).Any(p => p.Name == propertyName);
        }

    string ReadOnly(string propertyName)
        {
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        if(formType == FormType.Edit && IsKey(propertyName)) return "readonly";

        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);

        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>(prop, entityType);
        if(computedAttribute == null) return string.Empty;

        if(computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "readonly";
        if(computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "readonly";

        if(computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "readonly";
        if(computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "readonly";

        return string.Empty;
        }

    string GetFormGroupClass(string propertyName)
        {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>(prop, entityType);
        if(computedAttribute == null) return string.Empty;

        if(computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "hidden";
        if(computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "hidden";

        if(computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "hidden";
        if(computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "hidden";

        switch(formType)
            {
            case FormType.Create:
                    {
                    if(computedAttribute.ComputedPropertyType == ComputedPropertyType.Status) return "hidden";
                    if(computedAttribute.ComputedPropertyType == ComputedPropertyType.AutoIncrement) return "hidden";
                    if(computedAttribute.ComputedPropertyType == ComputedPropertyType.Computed) return "hidden";
                    break;
                    }
            }
        return string.Empty;
        }
}
