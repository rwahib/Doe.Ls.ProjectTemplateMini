  
@using Doe.Ls.EntityBase.MVCExtensions
@model Grade
@{
    var user = ViewBagWrapper.UserInfoExtensionBag.GetCurrentUser(ViewData);
    var task = ViewBagWrapper.TaskBag.GetCurrentTask(ViewData); 
    var formMethod = ViewBagWrapper.FormOperations.GetFormMethod(ViewData);
    
    var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
    var requestType = ViewBagWrapper.FormOperations.GetRequestType(ViewData);
        var statusValueItems = ViewBagWrapper.ListBag.GetList("statusValueItems",ViewData);
    
}
@Html.AntiForgeryToken()
      



 <div class="form-group @GetFormGroupClass("GradeCode")">
  <label for="GradeCode" class="col-lg-4">@Html.DisplayNameFor(model => model.GradeCode) <span class="mandatory">*</span></label>
  <input type="text" name="GradeCode" id="GradeCode" class="form-control col-lg-8" placeholder="e.g. Grade code" value="@Model.GradeCode"@ReadOnly("GradeCode")  required data-fv-notempty-message='The Grade code is required'     /> 
</div>
      



 <div class="form-group @GetFormGroupClass("GradeTitle")">
  <label for="GradeTitle" class="col-lg-4">@Html.DisplayNameFor(model => model.GradeTitle) <span class="mandatory">*</span></label>
  <input type="text" name="GradeTitle" id="GradeTitle" class="form-control col-lg-8" placeholder="e.g. Grade title" value="@Model.GradeTitle"@ReadOnly("GradeTitle")  required data-fv-notempty-message='The Grade title is required'     /> 
</div>
      




 <div class="form-group @GetFormGroupClass("Award")">
  <label for="Award" class="col-lg-4">@Html.DisplayNameFor(model => model.Award) </label>
  <textarea name="Award" id="Award" class="form-control col-lg-8 " placeholder="e.g. Award"     >@Model.Award</textarea>
</div>
      



 <div class="form-group @GetFormGroupClass("AwardMaxRates")">
  <label for="AwardMaxRates" class="col-lg-4">@Html.DisplayNameFor(model => model.AwardMaxRates) </label>
  <input type="text" name="AwardMaxRates" id="AwardMaxRates" class="form-control col-lg-8" placeholder="e.g. Award max rates" value="@Model.AwardMaxRates"@ReadOnly("AwardMaxRates")       /> 
</div>
      


  <div class="form-check">
            <label class="form-check-label">
                <input class="form-check-input"  type="checkbox" name="TeachingBased" id="TeachingBased" checked="@Model.TeachingBased" @ReadOnly("TeachingBased")/>
            </label>
        </div>    
      



 <div class="form-group @GetFormGroupClass("GradeType")">
  <label for="GradeType" class="col-lg-4">@Html.DisplayNameFor(model => model.GradeType) <span class="mandatory">*</span></label>
  <input type="text" name="GradeType" id="GradeType" class="form-control col-lg-8" placeholder="e.g. Grade type" value="@Model.GradeType"@ReadOnly("GradeType")  required data-fv-notempty-message='The Grade type is required'     /> 
</div>
      





 <div class="form-group @GetFormGroupClass("StatusId")">
  <label for="StatusId" class="col-lg-4">@Html.DisplayNameFor(model => model.StatusValue) <span class="mandatory">*</span></label>
  @Html.DropDownList("StatusId", statusValueItems , "Select Status value ...", new {id="StatusId", @class = "form-control col-lg-8 select2picker", Required="Required" })      
</div>
      




 <div class="form-group @GetFormGroupClass("Message")">
  <label for="Message" class="col-lg-4">@Html.DisplayNameFor(model => model.Message) </label>
  <textarea name="Message" id="Message" class="form-control col-lg-8 " placeholder="e.g. Message"     >@Model.Message</textarea>
</div>
 
  
@functions
{
    bool IsKey(string propertyName) 
    {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        return T4Helper.GetKeys(entityType).Any(p => p.Name == propertyName);
    }

    string ReadOnly(string propertyName) 
    {
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        if (formType == FormType.Edit && IsKey(propertyName)) return "readonly";

        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        
        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>(prop, entityType);
        if (computedAttribute == null) return string.Empty;

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "readonly";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "readonly";

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "readonly";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "readonly";
        
        return string.Empty;
    }

    string GetFormGroupClass(string propertyName) 
    {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>(prop, entityType);
        if (computedAttribute == null) return string.Empty;

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "hidden";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "hidden";

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "hidden";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "hidden";

        switch (formType)
        {
            case FormType.Create:
            {
                if (computedAttribute.ComputedPropertyType == ComputedPropertyType.Status) return "hidden";
                if (computedAttribute.ComputedPropertyType == ComputedPropertyType.AutoIncrement) return "hidden";
                if (computedAttribute.ComputedPropertyType == ComputedPropertyType.Computed) return "hidden";
                break;
            }
        }
        return string.Empty;        
    }    
}




