@model Doe.Ls.ProjectTemplate.Data.RoleDescription
@{
    var grade = ViewBagWrapper.GetGeneralObject<Grade>("Grade", ViewData);
    var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
    var task = ViewBagWrapper.TaskBag.GetCurrentTask(ViewData);
    var workflowEngine = ViewBagWrapper.WorkflowBag.GetWorkflowEngine(ViewData);
    var access = workflowEngine.GetWorkflowObjectPrivilege();

    var canEditBudgetValue = task.CanEditBudget(Model);

    var disable = access.CanEdit ? "" : "disabled='disabled'";

    var budgetValueNote = ViewBagWrapper.GetGeneralObject<string>("budgetValueNote", ViewData);

    //var isChecked = Model.BudgetExpenditure != "Nil" ? "checked" : "";
    //var isNilChecked = Model.BudgetExpenditure == "Nil" ? "checked" : "";

    var isChecked = "checked"; //has budget value
    var isNilChecked = "";
    if (string.IsNullOrEmpty(Model.BudgetExpenditureValue))
    {
        isChecked = "";
        isNilChecked = "checked";
    }
    
}
<div id="formTab" class="card.card-body">
    <form class="" data-tracking-enabled="true" role="form" method="POST"
          action="@Url.Action("SaveBudgetExpenditure")" id="form-roleDescription-Budget">
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.RoleDescriptionId)
        @Html.Hidden("FormType", formType)
        <div class="form-group ">

            <label for="BudgetExpenditure" class="col-form-label col-lg-4">Budget / Expenditure</label>
            <div class="col-lg-8">
                @if (access.CanEdit)
                {
                    <input type="radio" name="BudgetExpenditure" id="BudgetExpenditure" value="Nil" @isNilChecked /><text> Nil<br /></text>
                    <input type="radio" name="BudgetExpenditure" id="BudgetExpenditure" @isChecked
                           value="As per DoE Mo23 Financial Delegations"/><text> The role has a financial delegation of up to: <br/>
                (<a href="https://education.nsw.gov.au/business-services/downloads/delegations/pfaaa_index.pdf">https://education.nsw.gov.au/business-services/downloads/delegations/pfaaa_index.pdf</a>)
                    </text>
      
                }
                else
                {
                    @Model.BudgetExpenditure
                    @Html.HiddenFor(model => model.BudgetExpenditure)
                }
            </div>
        </div>

        @if (access.CanEdit)
        {
            <div class="form-group BudgetValuePanel" id="BudgetValuePanel1">
                <label for="BudgetValue" class="col-form-label col-lg-4">Budget value $</label>
                <div class="col-lg-3">
                    <input type="text" name="BudgetValue" placeholder="e.g. 2000" id="BudgetValue" class="form-control" value="@Model.BudgetExpenditureValue" />
                </div>
                <div class="col-lg-5"></div>
            </div>
            
            <div class="form-group BudgetValuePanel" id="BudgetExpenditureValueNote">

                <label for="BudgetExtraNotes" class="col-form-label col-lg-4">@Html.DisplayNameFor( model => model.BudgetExtraNotes)</label>
                <div class="col-lg-8">
                    <textarea name="BudgetExtraNotes" id="BudgetExtraNotes" class="form-control"
                              placeholder="If there are more content, please enter here...">@Model.BudgetExtraNotes</textarea>
                    </div>
                </div>

        }
        else
        {
               <div class="form-group BudgetValuePanel">
                    <label for="BudgetValue" class="col-form-label col-lg-4">Budget value</label>
                    <div class="col-lg-8">@Model.BudgetExpenditureValue</div>
                </div>
                
                <div class="form-group BudgetValuePanel">

                    <label for="BudgetExtraNotes" class="col-form-label col-lg-4">@Html.DisplayNameFor(model => model.BudgetExtraNotes)</label>
                    <div class="col-lg-8">@budgetValueNote</div>
                </div>
                
                @Html.HiddenFor(model => model.BudgetExpenditureValue)
                @Html.HiddenFor(model => model.BudgetExtraNotes)
           

        }


        <div class="col-lg-offset-2">
            <p>
                <button type="submit" class="btn btn-primary">Save & Next</button>
            </p>
        </div>

    </form>
</div>
@functions{
    bool IsKey(string propertyName)
    {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        return T4Helper.GetKeys(entityType).Any(p => p.Name == propertyName);
    }
    string ReadOnly(string propertyName)
    {
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        if (formType == FormType.Edit && IsKey(propertyName)) return "readonly";

        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);

        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>
    (prop, entityType);
        if (computedAttribute == null) return string.Empty;

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "readonly";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "readonly";

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "readonly";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "readonly";

        return string.Empty;
    }

    string GetFormGroupClass(string propertyName)
    {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>
            (prop, entityType);
        if (computedAttribute == null) return string.Empty;

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "hidden";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "hidden";

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "hidden";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "hidden";

        switch (formType)
        {
            case FormType.Create:
                {
                    if (computedAttribute.ComputedPropertyType == ComputedPropertyType.Status) return "hidden";
                    if (computedAttribute.ComputedPropertyType == ComputedPropertyType.AutoIncrement) return "hidden";
                    if (computedAttribute.ComputedPropertyType == ComputedPropertyType.Computed) return "hidden";
                    break;
                }
        }
        return string.Empty;
    }

}
