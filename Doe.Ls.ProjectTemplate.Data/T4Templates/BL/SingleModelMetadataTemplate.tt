<#@ template language="C#"inherits="MVCTemplate.BaseTemplate" #> 
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<#@ import namespace="Doe.Ls.EntityBase.Helper" #>
<#@ parameter name="EntityType" type="System.Data.Entity.Core.Metadata.Edm.EntityType"#>
<#@ parameter name="AppNamespace" type="System.String"#>
<#@ parameter name="EntityContext" type="System.Data.Entity.DbContext"#>

<# T4Helper.SetAssemblyClassNameFormatFromContext(EntityContext); #>

<# var helper=new EdmMetadataHelper(EntityContext);#>
using System.ComponentModel.DataAnnotations;
using Doe.Ls.EntityBase.MVCExtensions;
namespace <#=AppNamespace#>.Data
{
    [MetadataType(typeof(<#=EntityType.Name#>Metadata))]
    public partial class <#=EntityType.Name#>
    {
        public override string ToString()
        {
            return string.Format("{0}", this.<#=T4Helper.PropertyOperations.GetDispayPropertyName(EntityType) #>);
        }
    }

    public class <#=EntityType.Name#>Metadata
    {
<# foreach(var prop in EntityType.DeclaredProperties) {
        T4Helper.Validate(prop,EntityType,EntityContext,null);   
#>        
        [Display(Name ="<#=T4Helper.Wordify(prop.Name)#>" )]
<#if(T4Helper.PropertyOperations.IsRequired(prop,EntityType,EntityContext)) {#>
        [Required(ErrorMessage = "<#=T4Helper.Wordify(prop.Name)#> is required")]
<#} #>
<#if(T4Helper.PropertyOperations.IsTextArea(prop,EntityType,EntityContext)) {#>
        [DataType(DataType.MultilineText)]
<#} #>
<#if(T4Helper.PropertyOperations.IsText(prop)){#>
        [MaxLength(<#=T4Helper.PropertyOperations.GetMaxLength(prop,EntityType,EntityContext) #>, ErrorMessage = "Exceeding the max length, allowed only <#=T4Helper.PropertyOperations.GetMaxLength(prop,EntityType,EntityContext) #> character")]
<#} #>
<#if(T4Helper.PropertyOperations.IsPhone(prop)){#>
        [DataType(DataType.PhoneNumber)]
<#} #>
<#if(T4Helper.PropertyOperations.IsEmail(prop)){#>
        [DataType(DataType.EmailAddress)]
<#} #>
<#if(T4Helper.PropertyOperations.IsPassword(prop)){#>
        [DataType(DataType.Password)]
<#} #>
<#if(T4Helper.PropertyOperations.IsDate(prop)){#>
        [DisplayFormat(ApplyFormatInEditMode =true,DataFormatString = "{0:d}")]
        [DataType(DataType.Date)]
<#} #>
<#if(T4Helper.PropertyOperations.IsDateTime(prop)){#>
        [DisplayFormat(ApplyFormatInEditMode = true, DataFormatString = "{0:dd-MMM-yyyy HH:mm:ss}")]
        [DataType(DataType.DateTime)]
<#} #>
        public <#=prop.UnderlyingPrimitiveType.ClrEquivalentType.FullName#> <#=prop.Name#> {get;set;}
<# } #>  



<# foreach(var prop in EntityType.NavigationProperties) {
        
#>        
        [Display(Name ="<#=T4Helper.Wordify(prop.Name)#>" )]
        public object <#=prop.Name#> {get;set;}
<# } #>  

    }
}

