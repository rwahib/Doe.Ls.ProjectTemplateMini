  
@using Doe.Ls.EntityBase.MVCExtensions
@model CapabilityGroup
@{
    var user = ViewBagWrapper.UserInfoExtensionBag.GetCurrentUser(ViewData);
    var task = ViewBagWrapper.TaskBag.GetCurrentTask(ViewData); 
    var formMethod = ViewBagWrapper.FormOperations.GetFormMethod(ViewData);
    
    var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
    var requestType = ViewBagWrapper.FormOperations.GetRequestType(ViewData);
        
}
@Html.AntiForgeryToken()
      

@Html.HiddenFor(model => model.CapabilityGroupId)
@if(formType==FormType.Edit)  {
    <div class="form-group @GetFormGroupClass("CapabilityGroupId")">
        <label class="col-lg-4 ">@Html.DisplayNameFor(model => model.CapabilityGroupId) </label>
        <div class="col-lg-8">            <p class="form-control-plaintext">@Html.DisplayFor(model => model.CapabilityGroupId)</p>        </div>
    </div>
}                       
      



 <div class="form-group @GetFormGroupClass("GroupName")">
  <label for="GroupName" class="col-lg-4">@Html.DisplayNameFor(model => model.GroupName) <span class="mandatory">*</span></label>
  <input type="text" name="GroupName" id="GroupName" class="form-control col-lg-8" placeholder="e.g. Group name" value="@Model.GroupName"@ReadOnly("GroupName")  required data-fv-notempty-message='The Group name is required'     /> 
</div>
      




 <div class="form-group @GetFormGroupClass("GroupDescription")">
  <label for="GroupDescription" class="col-lg-4">@Html.DisplayNameFor(model => model.GroupDescription) </label>
  <textarea name="GroupDescription" id="GroupDescription" class="form-control col-lg-8 " placeholder="e.g. Group description"     >@Model.GroupDescription</textarea>
</div>
      



 <div class="form-group @GetFormGroupClass("DisplayOrder")">
  <label for="DisplayOrder" class="col-lg-4">@Html.DisplayNameFor(model => model.DisplayOrder) </label>
  <input type="number" name="DisplayOrder" id="DisplayOrder" class="form-control col-lg-8" placeholder="e.g. Display order" value="@Model.DisplayOrder"@ReadOnly("DisplayOrder")      data-fv-integer-message='The Display order is not an integer' /> 
</div>
      



 <div class="form-group @GetFormGroupClass("DateCreated")">
  <label for="DateCreated" class="col-lg-4">@Html.DisplayNameFor(model => model.DateCreated) <span class="mandatory">*</span></label>
  <input type="date" name="DateCreated" id="DateCreated" class="form-control col-lg-8" placeholder="e.g. Date created" value="@Model.DateCreated"@ReadOnly("DateCreated")  required data-fv-notempty-message='The Date created is required'  data-fv-date-format="DD/MM/YYYY"   /> 
</div>
      



 <div class="form-group @GetFormGroupClass("LastUpdated")">
  <label for="LastUpdated" class="col-lg-4">@Html.DisplayNameFor(model => model.LastUpdated) <span class="mandatory">*</span></label>
  <input type="date" name="LastUpdated" id="LastUpdated" class="form-control col-lg-8" placeholder="e.g. Last updated" value="@Model.LastUpdated"@ReadOnly("LastUpdated")  required data-fv-notempty-message='The Last updated is required'  data-fv-date-format="DD/MM/YYYY"   /> 
</div>
      



 <div class="form-group @GetFormGroupClass("CreatedBy")">
  <label for="CreatedBy" class="col-lg-4">@Html.DisplayNameFor(model => model.CreatedBy) <span class="mandatory">*</span></label>
  <input type="text" name="CreatedBy" id="CreatedBy" class="form-control col-lg-8" placeholder="e.g. Created by" value="@Model.CreatedBy"@ReadOnly("CreatedBy")  required data-fv-notempty-message='The Created by is required'     /> 
</div>
      



 <div class="form-group @GetFormGroupClass("LastModifiedBy")">
  <label for="LastModifiedBy" class="col-lg-4">@Html.DisplayNameFor(model => model.LastModifiedBy) <span class="mandatory">*</span></label>
  <input type="text" name="LastModifiedBy" id="LastModifiedBy" class="form-control col-lg-8" placeholder="e.g. Last modified by" value="@Model.LastModifiedBy"@ReadOnly("LastModifiedBy")  required data-fv-notempty-message='The Last modified by is required'     /> 
</div>
      



 <div class="form-group @GetFormGroupClass("GroupImage")">
  <label for="GroupImage" class="col-lg-4">@Html.DisplayNameFor(model => model.GroupImage) </label>
  <input type="text" name="GroupImage" id="GroupImage" class="form-control col-lg-8" placeholder="e.g. Group image" value="@Model.GroupImage"@ReadOnly("GroupImage")       /> 
</div>
 
  
@functions
{
    bool IsKey(string propertyName) 
    {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        return T4Helper.GetKeys(entityType).Any(p => p.Name == propertyName);
    }

    string ReadOnly(string propertyName) 
    {
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        if (formType == FormType.Edit && IsKey(propertyName)) return "readonly";

        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        
        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>(prop, entityType);
        if (computedAttribute == null) return string.Empty;

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "readonly";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "readonly";

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "readonly";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "readonly";
        
        return string.Empty;
    }

    string GetFormGroupClass(string propertyName) 
    {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>(prop, entityType);
        if (computedAttribute == null) return string.Empty;

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "hidden";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "hidden";

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "hidden";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "hidden";

        switch (formType)
        {
            case FormType.Create:
            {
                if (computedAttribute.ComputedPropertyType == ComputedPropertyType.Status) return "hidden";
                if (computedAttribute.ComputedPropertyType == ComputedPropertyType.AutoIncrement) return "hidden";
                if (computedAttribute.ComputedPropertyType == ComputedPropertyType.Computed) return "hidden";
                break;
            }
        }
        return string.Empty;        
    }    
}




