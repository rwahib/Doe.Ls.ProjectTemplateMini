


@using Doe.Ls.EntityBase.MVCExtensions
@model SysMessage
@{
    var user = ViewBagWrapper.UserInfoExtensionBag.GetCurrentUser(ViewData);
    var task = ViewBagWrapper.TaskBag.GetCurrentTask(ViewData);
    var formMethod = ViewBagWrapper.FormOperations.GetFormMethod(ViewData);

    var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
    var requestType = ViewBagWrapper.FormOperations.GetRequestType(ViewData);
    var sysMsgCategoryItems = ViewBagWrapper.ListBag.GetList("sysMsgCategoryItems", ViewData);

}

@Html.AntiForgeryToken()

<div class="form-group @GetFormGroupClass("Code")">
    <label for="Code" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.Code) <span class="mandatory">*</span></label>

    <div class="col-lg-10">
        <div class="input-group">

            <input type="text" name="Code" id="Code" class="form-control" placeholder="e.g. Code" value="@Model.Code" @ReadOnly("Code") required data-fv-notempty-message='The Code is required' />

        </div>
    </div>
</div>
<div class="form-group @GetFormGroupClass("MsgCategoryId")">
    <label for="MsgCategoryId" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.SysMsgCategory) <span class="mandatory">*</span></label>

    <div class="col-lg-10">
        @Html.DropDownList("MsgCategoryId", sysMsgCategoryItems, "Select Sys msg category ...", new { id = "MsgCategoryId", @class = "form-control select2picker", Required = "Required" })
    </div>
</div>

<div class="form-group @GetFormGroupClass("MessageFormat")">
    <label for="MessageFormat" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.MessageFormat) <span class="mandatory">*</span></label>

    <div class="col-lg-10">
        <div class="input-group">

            <textarea name="MessageFormat" id="MessageFormat" class="form-control tinymce" placeholder="e.g. {0} is not found" required data-fv-notempty-message='The Message format is required'>@Model.MessageFormat </textarea>

        </div>
    </div>
</div>

<div class="form-group @GetFormGroupClass("MessageHint")">
    <label for="MessageHint" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.MessageHint) </label>

    <div class="col-lg-10">
        <div class="input-group">

            <textarea name="MessageHint" id="MessageHint" class="form-control tinymce" placeholder="e.g. MessageHint">@Model.MessageHint</textarea>
        </div>
    </div>
</div>



@functions
{
    bool IsKey(string propertyName)
        {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        return T4Helper.GetKeys(entityType).Any(p => p.Name == propertyName);
        }

    string ReadOnly(string propertyName)
        {
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        if(formType == FormType.Edit && IsKey(propertyName)) return "readonly";

        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);

        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>(prop, entityType);
        if(computedAttribute == null) return string.Empty;

        if(computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "readonly";
        if(computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "readonly";

        if(computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "readonly";
        if(computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "readonly";

        return string.Empty;
        }

    string GetFormGroupClass(string propertyName)
        {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>(prop, entityType);
        if(computedAttribute == null) return string.Empty;

        if(computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "hidden";
        if(computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "hidden";

        if(computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "hidden";
        if(computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "hidden";

        switch(formType)
            {
            case FormType.Create:
                    {
                    if(computedAttribute.ComputedPropertyType == ComputedPropertyType.Status) return "hidden";
                    if(computedAttribute.ComputedPropertyType == ComputedPropertyType.AutoIncrement) return "hidden";
                    if(computedAttribute.ComputedPropertyType == ComputedPropertyType.Computed) return "hidden";
                    break;
                    }
            }
        return string.Empty;
        }
}
