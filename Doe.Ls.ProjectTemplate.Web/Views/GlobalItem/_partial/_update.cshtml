@model GlobalItem
@{
    var user = ViewBagWrapper.UserInfoExtensionBag.GetCurrentUser(ViewData);
    var task = ViewBagWrapper.TaskBag.GetCurrentTask(ViewData); 
    var formMethod = ViewBagWrapper.FormOperations.GetFormMethod(ViewData);
    
    var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
    var requestType = ViewBagWrapper.FormOperations.GetRequestType(ViewData);
        
}

@Html.AntiForgeryToken()

<div class="form-group @GetFormGroupClass("ItemCode")">
    <label for="ItemCode" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.ItemCode) <span class="mandatory">*</span></label>
    
<div class="col-lg-10">
    <div class="input-group">
                  
                <input type="text" name="ItemCode" id="ItemCode" class="form-control" placeholder="Please enter item code" value="@Model.ItemCode"  @ReadOnly("ItemCode")  required data-fv-notempty-message='The Item code is required'    />
                  
                        </div>
    </div>
</div>                       
<div class="form-group @GetFormGroupClass("ItemName")">
    <label for="ItemName" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.ItemName) <span class="mandatory">*</span></label>
    
<div class="col-lg-10">
    <div class="input-group">
                  
                <input type="text" name="ItemName" id="ItemName" class="form-control" placeholder="Please enter item name" value="@Model.ItemName"  @ReadOnly("ItemName")  required data-fv-notempty-message='The Item name is required'    />
                  
                        </div>
    </div>
</div>                       
<div class="form-group @GetFormGroupClass("ItemDescription")">
    <label for="ItemDescription" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.ItemDescription) </label>
    
<div class="col-lg-10">
    <div class="input-group">
                  
                <textarea name="ItemDescription" id="ItemDescription" class="form-control " placeholder="Please enter item description"
                        >@Model.ItemDescription  </textarea>
                  
                        </div>
    </div>
</div>                       
<div class="form-group @GetFormGroupClass("ItemContent")">
    <label for="ItemContent" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.ItemContent) </label>
    
<div class="col-lg-10">
    <div class="input-group">
                  
                <textarea name="ItemContent" id="ItemContent" class="form-control tinymce-rich-small" placeholder="Please enter item content"
                        >@Model.ItemContent  </textarea>
                  
                        </div>
    </div>
</div>                       
@*<div class="form-group @GetFormGroupClass("CreatedBy")">
    <label for="CreatedBy" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.CreatedBy) <span class="mandatory">*</span></label>
    
<div class="col-lg-10">
    <div class="input-group">
                  
                <input type="text" name="CreatedBy" id="CreatedBy" class="form-control" placeholder="Please enter created by username" value="@Model.CreatedBy"  @ReadOnly("CreatedBy")  required data-fv-notempty-message='The Created by is required'    />
                  
                        </div>
    </div>
</div>                       
<div class="form-group @GetFormGroupClass("CreatedDate")">
    <label for="CreatedDate" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.CreatedDate) <span class="mandatory">*</span></label>
    
<div class="col-lg-10">
    <div class="input-group">
                  
                <input type="date" name="CreatedDate" id="CreatedDate" class="form-control" placeholder="e.g. CreatedDate" value="@Model.CreatedDate"  @ReadOnly("CreatedDate")  required data-fv-notempty-message='The Created date is required'  data-fv-date-format="DD/MM/YYYY"  />
                  
                        </div>
    </div>
</div>                       
<div class="form-group @GetFormGroupClass("LastupdatedBy")">
    <label for="LastupdatedBy" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.LastupdatedBy) <span class="mandatory">*</span></label>
    
<div class="col-lg-10">
    <div class="input-group">
                  
                <input type="text" name="LastupdatedBy" id="LastupdatedBy" class="form-control" placeholder="e.g. LastupdatedBy" value="@Model.LastupdatedBy"  @ReadOnly("LastupdatedBy")  required data-fv-notempty-message='The Lastupdated by is required'    />
                  
                        </div>
    </div>
</div>                       
<div class="form-group @GetFormGroupClass("LastupdatedDate")">
    <label for="LastupdatedDate" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.LastupdatedDate) <span class="mandatory">*</span></label>
    
<div class="col-lg-10">
    <div class="input-group">
                  
                <input type="date" name="LastupdatedDate" id="LastupdatedDate" class="form-control" placeholder="e.g. LastupdatedDate" value="@Model.LastupdatedDate"  @ReadOnly("LastupdatedDate")  required data-fv-notempty-message='The Lastupdated date is required'  data-fv-date-format="DD/MM/YYYY"  />
                  
                        </div>
    </div>
</div>*@                       


@functions
{
    bool IsKey(string propertyName) 
    {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        return T4Helper.GetKeys(entityType).Any(p => p.Name == propertyName);
    }

    string ReadOnly(string propertyName) 
    {
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        if (formType == FormType.Edit && IsKey(propertyName)) return "readonly";

        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        
        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>(prop, entityType);
        if (computedAttribute == null) return string.Empty;

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "readonly";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "readonly";

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "readonly";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "readonly";
        
        return string.Empty;
    }

    string GetFormGroupClass(string propertyName) 
    {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>(prop, entityType);
        if (computedAttribute == null) return string.Empty;

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "hidden";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "hidden";

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "hidden";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "hidden";

        switch (formType)
        {
            case FormType.Create:
            {
                if (computedAttribute.ComputedPropertyType == ComputedPropertyType.Status) return "hidden";
                if (computedAttribute.ComputedPropertyType == ComputedPropertyType.AutoIncrement) return "hidden";
                if (computedAttribute.ComputedPropertyType == ComputedPropertyType.Computed) return "hidden";
                break;
            }
        }
        return string.Empty;        
    }    
}
