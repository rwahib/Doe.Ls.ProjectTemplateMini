@using Doe.Ls.EntityBase.MVCExtensions
@model Employee
@{
    var user = ViewBagWrapper.UserInfoExtensionBag.GetCurrentUser(ViewData);
    var task = ViewBagWrapper.TaskBag.GetCurrentTask(ViewData); 
    var formMethod = ViewBagWrapper.FormOperations.GetFormMethod(ViewData);
    
    var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
    var requestType = ViewBagWrapper.FormOperations.GetRequestType(ViewData);
        
}
@Html.AntiForgeryToken()
                         <div class="form-group @GetFormGroupClass("EmployeeId")">
  <label for="EmployeeId" class="col-lg-4">@Html.DisplayNameFor(model => model.EmployeeId) <span class="mandatory">*</span></label>
  <input type="number" name="EmployeeId" id="EmployeeId" class="form-control col-lg-8" placeholder="e.g. Employee id" value="@Model.EmployeeId"@ReadOnly("EmployeeId")  required data-fv-notempty-message='The Employee id is required'    data-fv-integer-message='The Employee id is not an integer' /> 
</div>
                         <div class="form-group @GetFormGroupClass("FirstName")">
  <label for="FirstName" class="col-lg-4">@Html.DisplayNameFor(model => model.FirstName) <span class="mandatory">*</span></label>
  <input type="text" name="FirstName" id="FirstName" class="form-control col-lg-8" placeholder="e.g. First name" value="@Model.FirstName"@ReadOnly("FirstName")  required data-fv-notempty-message='The First name is required'     /> 
</div>
                         <div class="form-group @GetFormGroupClass("LastName")">
  <label for="LastName" class="col-lg-4">@Html.DisplayNameFor(model => model.LastName) <span class="mandatory">*</span></label>
  <input type="text" name="LastName" id="LastName" class="form-control col-lg-8" placeholder="e.g. Last name" value="@Model.LastName"@ReadOnly("LastName")  required data-fv-notempty-message='The Last name is required'     /> 
</div>
                         <div class="form-group @GetFormGroupClass("CostCentreNumber")">
  <label for="CostCentreNumber" class="col-lg-4">@Html.DisplayNameFor(model => model.CostCentreNumber) </label>
  <input type="text" name="CostCentreNumber" id="CostCentreNumber" class="form-control col-lg-8" placeholder="e.g. Cost centre number" value="@Model.CostCentreNumber"@ReadOnly("CostCentreNumber")       /> 
</div>
                         <div class="form-group @GetFormGroupClass("CreatedDate")">
  <label for="CreatedDate" class="col-lg-4">@Html.DisplayNameFor(model => model.CreatedDate) </label>
  <input type="date" name="CreatedDate" id="CreatedDate" class="form-control col-lg-8" placeholder="e.g. Created date" value="@Model.CreatedDate"@ReadOnly("CreatedDate")    data-fv-date-format="DD/MM/YYYY"   /> 
</div>
                         <div class="form-group @GetFormGroupClass("LastModifiedDate")">
  <label for="LastModifiedDate" class="col-lg-4">@Html.DisplayNameFor(model => model.LastModifiedDate) </label>
  <input type="date" name="LastModifiedDate" id="LastModifiedDate" class="form-control col-lg-8" placeholder="e.g. Last modified date" value="@Model.LastModifiedDate"@ReadOnly("LastModifiedDate")    data-fv-date-format="DD/MM/YYYY"   /> 
</div>
                         <div class="form-group @GetFormGroupClass("CreatedBy")">
  <label for="CreatedBy" class="col-lg-4">@Html.DisplayNameFor(model => model.CreatedBy) </label>
  <input type="text" name="CreatedBy" id="CreatedBy" class="form-control col-lg-8" placeholder="e.g. Created by" value="@Model.CreatedBy"@ReadOnly("CreatedBy")       /> 
</div>
                         <div class="form-group @GetFormGroupClass("LastModifiedBy")">
  <label for="LastModifiedBy" class="col-lg-4">@Html.DisplayNameFor(model => model.LastModifiedBy) </label>
  <input type="text" name="LastModifiedBy" id="LastModifiedBy" class="form-control col-lg-8" placeholder="e.g. Last modified by" value="@Model.LastModifiedBy"@ReadOnly("LastModifiedBy")       /> 
</div>
                         <div class="form-group @GetFormGroupClass("StatusId")">
  <label for="StatusId" class="col-lg-4">@Html.DisplayNameFor(model => model.StatusId) <span class="mandatory">*</span></label>
  <input type="number" name="StatusId" id="StatusId" class="form-control col-lg-8" placeholder="e.g. Status id" value="@Model.StatusId"@ReadOnly("StatusId")  required data-fv-notempty-message='The Status id is required'    data-fv-integer-message='The Status id is not an integer' /> 
</div>
 
  
@functions
{
    bool IsKey(string propertyName) 
    {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        return T4Helper.GetKeys(entityType).Any(p => p.Name == propertyName);
    }

    string ReadOnly(string propertyName) 
    {
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        if (formType == FormType.Edit && IsKey(propertyName)) return "readonly";

        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        
        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>(prop, entityType);
        if (computedAttribute == null) return string.Empty;

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "readonly";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "readonly";

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "readonly";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "readonly";
        
        return string.Empty;
    }

    string GetFormGroupClass(string propertyName) 
    {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>(prop, entityType);
        if (computedAttribute == null) return string.Empty;

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "hidden";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "hidden";

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "hidden";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "hidden";

        switch (formType)
        {
            case FormType.Create:
            {
                if (computedAttribute.ComputedPropertyType == ComputedPropertyType.Status) return "hidden";
                if (computedAttribute.ComputedPropertyType == ComputedPropertyType.AutoIncrement) return "hidden";
                if (computedAttribute.ComputedPropertyType == ComputedPropertyType.Computed) return "hidden";
                break;
            }
        }
        return string.Empty;        
    }    
}




