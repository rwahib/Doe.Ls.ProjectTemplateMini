@model Doe.Ls.ProjectTemplate.Data.RoleDescription
@{
    var gradeItems = ViewBagWrapper.ListBag.GetList("gradesItems", ViewData);
    var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
    var task = ViewBagWrapper.TaskBag.GetCurrentTask(ViewData);
    var workflowEngine = ViewBagWrapper.WorkflowBag.GetWorkflowEngine(ViewData);
    var access = workflowEngine.GetWorkflowObjectPrivilege();
    }
<div id="formTab" class="card.card-body">
    <form class="" data-tracking-enabled="true" role="form" method="POST"
          action="@Url.Action("SaveKeyAccountabilities")" id="form-roleDescription-keyAccountabilities">
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.RoleDescriptionId)
        @Html.Hidden("FormType", formType)

        <div class="form-group ">

            <label for="KeyAccountabilities" class="col-form-label col-lg-4">
                @Html.DisplayNameFor(model => model.RolePositionDescription.RoleDescription.KeyAccountabilities)
                <span class="hint">(Minimum 6 and maximum 9 bullet points)</span>
            </label>
            <div class="col-lg-8">
               
                    <textarea name="KeyAccountabilities" id="KeyAccountabilities" class="form-control tinymce-simple tinymceListOnly"
                              placeholder="Please enter...">@Model.KeyAccountabilities</textarea>
            </div>
        </div>

        <div class="form-group ">
            <label for="KeyChallenges" class="col-form-label col-lg-4">@Html.DisplayNameFor(model => model.RolePositionDescription.RoleDescription.KeyChallenges) <br/><span class="hint">(Minimum 2 and maximum 4 bullet points)</span></label>
            <div class="col-lg-8">
               
                    <textarea name="KeyChallenges" id="KeyChallenges" class="form-control tinymceListOnly"
                              placeholder="Please enter...">@Model.KeyChallenges</textarea>
               
               
            </div>
        </div>
        
        <div class="col-lg-offset-2">
            <p>
                <button type="submit" class="btn btn-primary">Save & Next</button>
            </p>
        </div>

    </form>
</div>
@functions{
    bool IsKey(string propertyName)
    {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        return T4Helper.GetKeys(entityType).Any(p => p.Name == propertyName);
    }
    string ReadOnly(string propertyName)
    {
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        if (formType == FormType.Edit && IsKey(propertyName)) return "readonly";

        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);

        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>
    (prop, entityType);
        if (computedAttribute == null) return string.Empty;

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "readonly";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "readonly";

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "readonly";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "readonly";

        return string.Empty;
    }

    string GetFormGroupClass(string propertyName)
    {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>
            (prop, entityType);
        if (computedAttribute == null) return string.Empty;

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "hidden";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "hidden";

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "hidden";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "hidden";

        switch (formType)
        {
            case FormType.Create:
                {
                    if (computedAttribute.ComputedPropertyType == ComputedPropertyType.Status) return "hidden";
                    if (computedAttribute.ComputedPropertyType == ComputedPropertyType.AutoIncrement) return "hidden";
                    if (computedAttribute.ComputedPropertyType == ComputedPropertyType.Computed) return "hidden";
                    break;
                }
        }
        return string.Empty;
    }

}
