<#@ template language="C#"inherits="BaseTemplate" #>  
<#@ assembly name="System.Core" #>
<#@ import namespace="Doe.Ls.EntityBase.Helper" #>
<#@ import namespace="System.Data.Entity.Core.Metadata.Edm" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter name="AppNamespace" type="System.String"#>
<#@ parameter name="EntityContext" type="System.Data.Entity.DbContext"#>
<# T4Helper.SetAssemblyClassNameFormatFromContext(EntityContext); #>
<#@ parameter name="EntityType" type="System.Data.Entity.Core.Metadata.Edm.EntityType"#>
<#    var helper=new EdmMetadataHelper(EntityContext);#>
@using Doe.Ls.EntityBase.MVCExtensions
@model <#= EntityType.Name#>
@{
    var user = ViewBagWrapper.UserInfoExtensionBag.GetCurrentUser(ViewData);
    var task = ViewBagWrapper.TaskBag.GetCurrentTask(ViewData); 
    var formMethod = ViewBagWrapper.FormOperations.GetFormMethod(ViewData);
    
    var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
    var requestType = ViewBagWrapper.FormOperations.GetRequestType(ViewData);
    <# var lookups=new List<string>();
    var suffix="";#>
<#foreach (var mp in T4Helper.ListPropertiesWithFkInfo(EntityType)){
if(!mp.FK) continue;
        var parentItemName=T4Helper.GetLocalVariableName(mp.PareEntityType);
        if(lookups.Contains(parentItemName)){suffix=string.Format("{0}",lookups.IndexOf(parentItemName));}else{
        lookups.Add(parentItemName);
        }
        var localVariableName= T4Helper.GetLocalVariableName(mp.PareEntityType)+"Items"+suffix;
#>
    var <#=localVariableName #> = ViewBagWrapper.ListBag.GetList("<#= localVariableName#>",ViewData);
<#    } #>    
}
@Html.AntiForgeryToken()
<# foreach (var pm in T4Helper.ListPropertiesWithFkInfo(EntityType)) {  #>
<# ClearIndent(); #>      

<#if(GenerateStaticTemplateForPrimaryKey(pm)){continue;} #>

<#if(GenerateCheckBoxTemplate(pm)){continue;} #>

<#if(GenerateSimpleInputTemplate(pm)){continue;} #>

<#if(GenerateTextAreaTemplate(pm)){continue;} #>

<#if(GenerateLookupTemplate(pm)){continue;} #>

 <# }// foreach list of properties #> 
  
@functions
{
    bool IsKey(string propertyName) 
    {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        return T4Helper.GetKeys(entityType).Any(p => p.Name == propertyName);
    }

    string ReadOnly(string propertyName) 
    {
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        if (formType == FormType.Edit && IsKey(propertyName)) return "readonly";

        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        
        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>(prop, entityType);
        if (computedAttribute == null) return string.Empty;

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "readonly";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "readonly";

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "readonly";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "readonly";
        
        return string.Empty;
    }

    string GetFormGroupClass(string propertyName) 
    {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>(prop, entityType);
        if (computedAttribute == null) return string.Empty;

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "hidden";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "hidden";

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "hidden";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "hidden";

        switch (formType)
        {
            case FormType.Create:
            {
                if (computedAttribute.ComputedPropertyType == ComputedPropertyType.Status) return "hidden";
                if (computedAttribute.ComputedPropertyType == ComputedPropertyType.AutoIncrement) return "hidden";
                if (computedAttribute.ComputedPropertyType == ComputedPropertyType.Computed) return "hidden";
                break;
            }
        }
        return string.Empty;        
    }    
}




<#+ 
    //GenerateStaticTemplateForPrimaryKey
private bool GenerateStaticTemplateForPrimaryKey(PropMeta pm)
    {    
if(T4Helper.PropertyOperations.IsKey(pm.Property,EntityType) && T4Helper.PropertyOperations.IsKeyAutoIncrement(EntityType,EntityContext)) {
 #>
@Html.HiddenFor(model => model.<#= pm.Property.Name#>)
@if(formType==FormType.Edit)  {
    <div class="form-group @GetFormGroupClass("<#=pm.Property.Name#>")">
        <label class="col-lg-4 ">@Html.DisplayNameFor(model => model.<#=pm.Property.Name#>) </label>
        <div class="col-lg-8">            <p class="form-control-plaintext">@Html.DisplayFor(model => model.<#=pm.Property.Name#>)</p>        </div>
    </div>
}                       
<#+         
            return true;

}
#>
<#+     
    return false;
}  
// end of GenerateStaticTemplateForPrimaryKey    
#>




<#+ 
    //GenerateSimpleInputTemplate
private bool GenerateSimpleInputTemplate(PropMeta pm)
    {    
if(!pm.FK&&T4Helper.IsFormInput(pm.Property,EntityType,EntityContext)) {
 #>
 <div class="form-group @GetFormGroupClass("<#=pm.Property.Name#>")">
  <label for="<#=pm.Property.Name#>" class="col-lg-4">@Html.DisplayNameFor(model => model.<#=pm.Property.Name#>) <#=GetAsteriskForRequiredField(pm)#></label>
  <input type="<#=  GetInputType(pm)#>" name="<#=pm.Property.Name #>" id="<#=pm.Property.Name#>" class="form-control col-lg-8" placeholder="e.g. <#=T4Helper.Wordify(pm.Property.Name)#>" value="@Model.<#=pm.Property.Name#>"@ReadOnly("<#=pm.Property.Name #>")  <#= IsRequired(pm)#> <#=  SetEmail(pm)#> <#=SetDate(pm) #>  <#=SetInteger(pm)#> /> 
</div>
<#+         
            return true;

}
#>
<#+     
    return false;
}  
// GenerateSimpleInputTemplate   
#>

<#+ 
    //GenerateTextAreaTemplate
private bool GenerateTextAreaTemplate(PropMeta pm)
    {    
if(!pm.FK&&T4Helper.PropertyOperations.IsTextArea(pm.Property,EntityType,EntityContext)) {
 #>
 <div class="form-group @GetFormGroupClass("<#=pm.Property.Name#>")">
  <label for="<#=pm.Property.Name#>" class="col-lg-4">@Html.DisplayNameFor(model => model.<#=pm.Property.Name#>) <#=GetAsteriskForRequiredField(pm)#></label>
  <textarea name="<#=pm.Property.Name #>" id="<#= pm.Property.Name #>" class="form-control col-lg-8 <#=T4Helper.PropertyOperations.IsRichText(pm.Property,EntityType)?"tinymce":string.Empty#>" placeholder="e.g. <#=T4Helper.Wordify(pm.Property.Name) #>" <#= SetRichText(pm)#>  <#=IsRequired(pm)#>  ><#=T4Helper.PropertyOperations.IsRichText(pm.Property,EntityType)?"@Html.Raw(Model."+pm.Property.Name+")":"@Model."+pm.Property.Name#></textarea>
</div>
<#+         
            return true;

}
#>
<#+     
    return false;
}  
// GenerateTextAreaTemplate   
#>



<#+ 
    //GenerateLookupTemplate
private bool GenerateLookupTemplate(PropMeta pm)
    {    
if(pm.FK) {
 #>
 <div class="form-group @GetFormGroupClass("<#=pm.Property.Name#>")">
  <label for="<#=pm.Property.Name#>" class="col-lg-4">@Html.DisplayNameFor(model => model.<#=pm.PareEntityType.Name#>) <#=GetAsteriskForRequiredField(pm)#></label>
  @Html.DropDownList("<#=pm.Property.Name #>", <#=T4Helper.GetLocalVariableName(pm.PareEntityType)#>Items , "Select <#=pm.PareEntityType.Name.Wordify() #> ...", new {id="<#=pm.Property.Name #>", @class = "form-control col-lg-8 select2picker"<#=GetRequiredPropertyValue(pm)#> })      
</div>
<#+         
            return true;

}
#>
<#+     
    return false;
}  
// GenerateLookupTemplate   
#>



<#+ 
    //method with text template
private bool GenerateCheckBoxTemplate(PropMeta pm)
    {    
if(T4Helper.PropertyOperations.IsCheckbox(pm.Property)) {
 #>
  <div class="form-check">
            <label class="form-check-label">
                <input class="form-check-input"  type="checkbox" name="<#=pm.Property.Name#>" id="<#=pm.Property.Name#>" checked="@Model.<#=pm.Property.Name #>" @ReadOnly("<#=pm.Property.Name #>")/>
            </label>
        </div>    
<#+         
            return true;

}
#>
<#+     
    return false;
}  
// GenerateCheckBoxTemplate   
#>





<#+ 
    //method with text template
private bool GenerateTemplate(PropMeta pm)
    {    
if(/*condition*/true) {
 #>
@Html.HiddenFor(model => model.<#= pm.Property.Name#>)
@if(formType==FormType.Edit)  {
    <div class="form-group @GetFormGroupClass("<#=pm.Property.Name#>")">
        <label class="col-lg-4 ">@Html.DisplayNameFor(model => model.<#=pm.Property.Name#>) </label>
        <div class="col-lg-8">            <p class="form-control-plaintext">@Html.DisplayFor(model => model.<#=pm.Property.Name#>)</p>        </div>
    </div>
}                       
<#+         
            return true;

}
#>
<#+     
    return false;
}  
// GenerateTemplate   
#>


