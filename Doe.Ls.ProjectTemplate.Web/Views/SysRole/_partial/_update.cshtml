@model SysRole
@{
    var user = ViewBagWrapper.UserInfoExtensionBag.GetCurrentUser(ViewData);
    var task = ViewBagWrapper.TaskBag.GetCurrentTask(ViewData);
    var formMethod = ViewBagWrapper.FormOperations.GetFormMethod(ViewData);

    var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
    var requestType = ViewBagWrapper.FormOperations.GetRequestType(ViewData);

}

@Html.AntiForgeryToken()

<div class="form-group @GetFormGroupClass("RoleId")">
    <label for="RoleId" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.RoleId) <span class="mandatory">*</span></label>

    <div class="col-lg-10">
        <div class="input-group">
            
            <input type="number" name="RoleId" id="RoleId" class="form-control" placeholder="Please enter Role Id" value="@Model.RoleId" @ReadOnly("RoleId") required data-fv-notempty-message='The Role id is required' data-fv-integer-message='The Role id is not an integer' />
            
        </div>
    </div>
</div>
<div class="form-group @GetFormGroupClass("RoleTitle")">
    <label for="RoleTitle" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.RoleTitle) <span class="mandatory">*</span></label>

    <div class="col-lg-10">
        <div class="input-group">
            
            <input type="text" name="RoleTitle" id="RoleTitle" class="form-control" placeholder="Please enter role title" value="@Model.RoleTitle" @ReadOnly("RoleTitle") required data-fv-notempty-message='The Role title is required' />
            
        </div>
    </div>
</div>
<div class="form-group @GetFormGroupClass("RoleApiName")">
    <label for="RoleApiName" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.RoleApiName) </label>

    <div class="col-lg-10">
        <div class="input-group">
            
            <input type="text" name="RoleApiName" id="RoleApiName" class="form-control" placeholder="Please enter role API name" value="@Model.RoleApiName" @ReadOnly("RoleApiName") />
            
        </div>
    </div>
</div>
<div class="form-group @GetFormGroupClass("RoleDescription")">
    <label for="RoleDescription" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.RoleDescription) </label>

    <div class="col-lg-10">
        <div class="input-group">
            
            <textarea name="RoleDescription" id="RoleDescription" class="form-control " 
                      placeholder="Please enter role description">@Model.RoleDescription</textarea>
        
    </div>
</div>
</div>

@functions
{
    bool IsKey(string propertyName)
    {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        return T4Helper.GetKeys(entityType).Any(p => p.Name == propertyName);
    }

    string ReadOnly(string propertyName)
    {
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        if (formType == FormType.Edit && IsKey(propertyName)) return "readonly";

        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);

        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>(prop, entityType);
        if (computedAttribute == null) return string.Empty;

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "readonly";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "readonly";

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "readonly";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "readonly";

        return string.Empty;
    }

    string GetFormGroupClass(string propertyName)
    {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>(prop, entityType);
        if (computedAttribute == null) return string.Empty;

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "hidden";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "hidden";

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "hidden";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "hidden";

        switch (formType)
        {
            case FormType.Create:
                {
                    if (computedAttribute.ComputedPropertyType == ComputedPropertyType.Status) return "hidden";
                    if (computedAttribute.ComputedPropertyType == ComputedPropertyType.AutoIncrement) return "hidden";
                    if (computedAttribute.ComputedPropertyType == ComputedPropertyType.Computed) return "hidden";
                    break;
                }
        }
        return string.Empty;
    }
}
