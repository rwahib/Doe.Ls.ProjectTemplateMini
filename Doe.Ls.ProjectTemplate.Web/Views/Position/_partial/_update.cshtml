@model Position
@{
    var user = ViewBagWrapper.UserInfoExtensionBag.GetCurrentUser(ViewData);
    var task = ViewBagWrapper.TaskBag.GetCurrentTask(ViewData); 
    var formMethod = ViewBagWrapper.FormOperations.GetFormMethod(ViewData);
    
    var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
    var requestType = ViewBagWrapper.FormOperations.GetRequestType(ViewData);
        var positionItems = ViewBagWrapper.ListBag.GetList("positionItems",ViewData);
    var unitItems = ViewBagWrapper.ListBag.GetList("unitItems",ViewData);
    var positionLevelItems = ViewBagWrapper.ListBag.GetList("positionLevelItems",ViewData);
    var statusValueItems = ViewBagWrapper.ListBag.GetList("statusValueItems",ViewData);
    var locationItems = ViewBagWrapper.ListBag.GetList("locationItems",ViewData);
    
}

@Html.AntiForgeryToken()

 
@Html.HiddenFor(model => model.PositionId)
@if(formType==FormType.Edit)  {
    <div class="form-group @GetFormGroupClass("PositionId")">
        <label class="col-lg-4 col-form-label">
            @Html.DisplayNameFor(model => model.PositionId)
        </label>
        <div class="col-lg-8">
            <p class="form-control-plaintext">@Html.DisplayFor(model => model.PositionId)</p>
        </div>
    </div>                       
}
<div class="form-group @GetFormGroupClass("ReportToPositionId")">
        <label for="ReportToPositionId" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.ReportToPositionId) <span class="mandatory">*</span></label>

<div class="col-lg-10">
        @Html.DropDownList("ReportToPositionId", positionItems , "Select Position ...", new {id="ReportToPositionId", @class = "form-control select2picker", Required="Required" })      
    </div>
</div>                       
<div class="form-group @GetFormGroupClass("PositionNumber")">
    <label for="PositionNumber" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.PositionNumber) <span class="mandatory">*</span></label>
    
<div class="col-lg-10">
    <div class="input-group">
                  
                <input type="text" name="PositionNumber" id="PositionNumber" class="form-control" placeholder="Please enter Position Number" value="@Model.PositionNumber"  @ReadOnly("PositionNumber")  required data-fv-notempty-message='The Position number is required'    />
                  
                        </div>
    </div>
</div>                       
<div class="form-group @GetFormGroupClass("RolePositionDescriptionId")">
    <label for="RolePositionDescriptionId" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.RolePositionDescriptionId) </label>
    
<div class="col-lg-10">
    <div class="input-group">
                  
                <input type="number" name="RolePositionDescriptionId" id="RolePositionDescriptionId" class="form-control" placeholder="Please ente RolePosition Description Id" value="@Model.RolePositionDescriptionId"  @ReadOnly("RolePositionDescriptionId")      data-fv-integer-message='The Role position description id is not an integer'/>
                  
                        </div>
    </div>
</div>                       
<div class="form-group @GetFormGroupClass("UnitId")">
        <label for="UnitId" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.Unit) <span class="mandatory">*</span></label>

<div class="col-lg-10">
        @Html.DropDownList("UnitId", unitItems , "Select Unit ...", new {id="UnitId", @class = "form-control select2picker", Required="Required" })      
    </div>
</div>                       
<div class="form-group @GetFormGroupClass("PositionTitle")">
    <label for="PositionTitle" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.PositionTitle) <span class="mandatory">*</span></label>
    
<div class="col-lg-10">
    <div class="input-group">
                  
                <input type="text" name="PositionTitle" id="PositionTitle" class="form-control" placeholder="Please enter Position Title" value="@Model.PositionTitle"  @ReadOnly("PositionTitle")  required data-fv-notempty-message='The Position title is required'    />
                  
                        </div>
    </div>
</div>                       
<div class="form-group @GetFormGroupClass("Description")">
    <label for="Description" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.Description) </label>
    
<div class="col-lg-10">
    <div class="input-group">
                  
                <textarea name="Description" id="Description" class="form-control " placeholder="Please enter the description">@Model.Description</textarea>
                  
                        </div>
    </div>
</div>                       
<div class="form-group @GetFormGroupClass("PositionLevelId")">
        <label for="PositionLevelId" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.PositionLevel) <span class="mandatory">*</span></label>

<div class="col-lg-10">
        @Html.DropDownList("PositionLevelId", positionLevelItems , "Select Position level ...", new {id="PositionLevelId", @class = "form-control select2picker", Required="Required" })      
    </div>
</div>                       
<div class="form-group @GetFormGroupClass("StatusId")">
        <label for="StatusId" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.StatusValue) <span class="mandatory">*</span></label>

<div class="col-lg-10">
        @Html.DropDownList("StatusId", statusValueItems , "Select Status value ...", new {id="StatusId", @class = "form-control select2picker", Required="Required" })      
    </div>
</div>                       
<div class="form-group @GetFormGroupClass("PositionPath")">
    <label for="PositionPath" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.PositionPath) </label>
    
<div class="col-lg-10">
    <div class="input-group">
                  
                <input type="text" name="PositionPath" id="PositionPath" class="form-control" placeholder="Please enter Position Path" value="@Model.PositionPath"  @ReadOnly("PositionPath")      />
                  
                        </div>
    </div>
</div>                       
<div class="form-group @GetFormGroupClass("LocationId")">
        <label for="LocationId" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.Location) <span class="mandatory">*</span></label>

<div class="col-lg-10">
        @Html.DropDownList("LocationId", locationItems , "Select Location ...", new {id="LocationId", @class = "form-control select2picker", Required="Required" })      
    </div>
</div>                       
<div class="form-group @GetFormGroupClass("CreatedDate")">
    <label for="CreatedDate" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.CreatedDate) <span class="mandatory">*</span></label>
    
<div class="col-lg-10">
    <div class="input-group">
                  
                <input type="date" name="CreatedDate" id="CreatedDate" class="form-control" placeholder="e.g. CreatedDate" value="@Model.CreatedDate"  @ReadOnly("CreatedDate")  required data-fv-notempty-message='The Created date is required'  data-fv-date-format="DD/MM/YYYY"  />
                  
                        </div>
    </div>
</div>                       
<div class="form-group @GetFormGroupClass("LastModifiedDate")">
    <label for="LastModifiedDate" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.LastModifiedDate) <span class="mandatory">*</span></label>
    
<div class="col-lg-10">
    <div class="input-group">
                  
                <input type="date" name="LastModifiedDate" id="LastModifiedDate" class="form-control" placeholder="e.g. LastModifiedDate" value="@Model.LastModifiedDate"  @ReadOnly("LastModifiedDate")  required data-fv-notempty-message='The Last modified date is required'  data-fv-date-format="DD/MM/YYYY"  />
                  
                        </div>
    </div>
</div>                       
<div class="form-group @GetFormGroupClass("CreatedBy")">
    <label for="CreatedBy" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.CreatedBy) <span class="mandatory">*</span></label>
    
<div class="col-lg-10">
    <div class="input-group">
                  
                <input type="text" name="CreatedBy" id="CreatedBy" class="form-control" placeholder="e.g. CreatedBy" value="@Model.CreatedBy"  @ReadOnly("CreatedBy")  required data-fv-notempty-message='The Created by is required'    />
                  
                        </div>
    </div>
</div>                       
<div class="form-group @GetFormGroupClass("LastModifiedBy")">
    <label for="LastModifiedBy" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.LastModifiedBy) <span class="mandatory">*</span></label>
    
<div class="col-lg-10">
    <div class="input-group">
                  
                <input type="text" name="LastModifiedBy" id="LastModifiedBy" class="form-control" placeholder="e.g. LastModifiedBy" value="@Model.LastModifiedBy"  @ReadOnly("LastModifiedBy")  required data-fv-notempty-message='The Last modified by is required'    />
                  
                        </div>
    </div>
</div>                       


@functions
{
    bool IsKey(string propertyName) 
    {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        return T4Helper.GetKeys(entityType).Any(p => p.Name == propertyName);
    }

    string ReadOnly(string propertyName) 
    {
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        if (formType == FormType.Edit && IsKey(propertyName)) return "readonly";

        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        
        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>(prop, entityType);
        if (computedAttribute == null) return string.Empty;

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "readonly";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "readonly";

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "readonly";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "readonly";
        
        return string.Empty;
    }

    string GetFormGroupClass(string propertyName) 
    {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>(prop, entityType);
        if (computedAttribute == null) return string.Empty;

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "hidden";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "hidden";

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "hidden";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "hidden";

        switch (formType)
        {
            case FormType.Create:
            {
                if (computedAttribute.ComputedPropertyType == ComputedPropertyType.Status) return "hidden";
                if (computedAttribute.ComputedPropertyType == ComputedPropertyType.AutoIncrement) return "hidden";
                if (computedAttribute.ComputedPropertyType == ComputedPropertyType.Computed) return "hidden";
                break;
            }
        }
        return string.Empty;        
    }    
}
