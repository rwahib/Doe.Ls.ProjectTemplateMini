@model Location
@{
    var user = ViewBagWrapper.UserInfoExtensionBag.GetCurrentUser(ViewData);
    var task = ViewBagWrapper.TaskBag.GetCurrentTask(ViewData);
    var formMethod = ViewBagWrapper.FormOperations.GetFormMethod(ViewData);

    var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
    var requestType = ViewBagWrapper.FormOperations.GetRequestType(ViewData);
    var directorateItems = ViewBagWrapper.ListBag.GetList("directorateItems", ViewData);

}

@Html.AntiForgeryToken()

    <div class="form-group @GetFormGroupClass("LocationId")">
        <label for="LocationId" class="col-lg-4">@Html.DisplayNameFor(model => model.LocationId) <span class="mandatory">*</span></label>

        <input type="number" name="LocationId" id="LocationId" class="form-control col-lg-8" placeholder="e.g. Location id" value="@Model.LocationId" required data-fv-notempty-message='The Location id is required' data-fv-integer-message='The Location id is not an integer' @ReadOnly("LocationId" ) />

    </div>

<div class="form-group @GetFormGroupClass("Name")">
    <label for="Name" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.Name) <span class="mandatory">*</span></label>
    <input type="text" name="Name" id="Name" class="form-control col-lg-8" placeholder="e.g. Name" value="@Model.Name" @ReadOnly("Name") required data-fv-notempty-message='The Name is required' />

</div>
<div class="form-group @GetFormGroupClass("DirectorateId")">
    <label for="DirectorateId" class="col-lg-4">@Html.DisplayNameFor(model => model.Directorate) <span class="mandatory">*</span></label>


    @Html.DropDownList("DirectorateId", directorateItems, "Select Directorate ...", new { id = "DirectorateId", @class = "form-control col-lg-8 select2picker", Required = "Required" })

</div>

@functions
{
    bool IsKey(string propertyName) {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        return T4Helper.GetKeys(entityType).Any(p => p.Name == propertyName);
    }

    string ReadOnly(string propertyName) {
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        if (formType == FormType.Edit && IsKey(propertyName)) return "readonly";

        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);

        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>(prop, entityType);
        if (computedAttribute == null) return string.Empty;

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "readonly";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "readonly";

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "readonly";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "readonly";

        return string.Empty;
    }

    string GetFormGroupClass(string propertyName) {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>(prop, entityType);
        if (computedAttribute == null) return string.Empty;

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "hidden";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "hidden";

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "hidden";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "hidden";

        switch (formType) {
            case FormType.Create: {
                    if (computedAttribute.ComputedPropertyType == ComputedPropertyType.Status) return "hidden";
                    if (computedAttribute.ComputedPropertyType == ComputedPropertyType.AutoIncrement) return "hidden";
                    if (computedAttribute.ComputedPropertyType == ComputedPropertyType.Computed) return "hidden";
                    break;
                }
        }
        return string.Empty;
    }
}
