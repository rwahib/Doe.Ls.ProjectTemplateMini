@model RolePositionDescription
@{
    var user = ViewBagWrapper.UserInfoExtensionBag.GetCurrentUser(ViewData);
    var task = ViewBagWrapper.TaskBag.GetCurrentTask(ViewData);
    var formMethod = ViewBagWrapper.FormOperations.GetFormMethod(ViewData);

    var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
    var requestType = ViewBagWrapper.FormOperations.GetRequestType(ViewData);
    var gradeItems = ViewBagWrapper.ListBag.GetList("gradeItems", ViewData);

}

@Html.AntiForgeryToken()


@Html.HiddenFor(model => model.RolePositionDescId)
@if (formType == FormType.Edit)
{
    <div class="form-group @GetFormGroupClass("RolePositionDescId")">
        <label class="col-lg-4 col-form-label">
            @Html.DisplayNameFor(model => model.RolePositionDescId)
        </label>
        <div class="col-lg-8">
            <p class="form-control-plaintext">@Html.DisplayFor(model => model.RolePositionDescId)</p>
        </div>
    </div>
}
<div class="form-group @GetFormGroupClass("StatusId")">
    <label for="StatusId" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.StatusId) <span class="mandatory">*</span></label>

    <div class="col-lg-10">
        <div class="input-group">
            
            <input type="number" name="StatusId" id="StatusId" class="form-control" placeholder="Please enter Status Id" value="@Model.StatusId" @ReadOnly("StatusId") required data-fv-notempty-message='The Status id is required' data-fv-integer-message='The Status id is not an integer' />
            
        </div>
    </div>
</div>
<div class="form-group @GetFormGroupClass("Version")">
    <label for="Version" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.Version) <span class="mandatory">*</span></label>

    <div class="col-lg-10">
        <div class="input-group">
            
            <input type="number" name="Version" id="Version" class="form-control" placeholder="Please enter version" value="@Model.Version" @ReadOnly("Version") required data-fv-notempty-message='The Version is required' data-fv-integer-message='The Version is not an integer' />
            
        </div>
    </div>
</div>
<div class="form-group @GetFormGroupClass("Title")">
    <label for="Title" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.Title) <span class="mandatory">*</span></label>

    <div class="col-lg-10">
        <div class="input-group">
            
            <input type="text" name="Title" id="Title" class="form-control" placeholder="Please enter Title" value="@Model.Title" @ReadOnly("Title") required data-fv-notempty-message='The Title is required' />
            
        </div>
    </div>
</div>
<div class="form-group @GetFormGroupClass("DocNumber")">
    <label for="DocNumber" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.DocNumber) <span class="mandatory">*</span></label>

    <div class="col-lg-10">
        <div class="input-group">
            
            <input type="text" name="DocNumber" id="DocNumber" class="form-control" placeholder="Please enter DOC Number, e.g. DOC17/1978888" value="@Model.DocNumber" @ReadOnly("DocNumber") required data-fv-notempty-message='The Doc number is required' />
            
        </div>
    </div>
</div>
<div class="form-group @GetFormGroupClass("GradeCode")">
    <label for="GradeCode" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.Grade) <span class="mandatory">*</span></label>

    <div class="col-lg-10">
        @Html.DropDownList("GradeCode", gradeItems, "Select Grade ...", new { id = "GradeCode", @class = "form-control select2picker", Required = "Required" })
    </div>
</div>
<div class="form-group @GetFormGroupClass("IsPositionDescription")">
    <label for="IsPositionDescription" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.IsPositionDescription) <span class="mandatory">*</span></label>

    <div class="col-lg-4">
        <div class="checkbox">
            <label>
                <input type="checkbox" name="IsPositionDescription" id="IsPositionDescription" checked="@Model.IsPositionDescription" @ReadOnly("IsPositionDescription") />
            </label>
        </div>
    </div>
</div>
<div class="form-group @GetFormGroupClass("CreatedDate")">
    <label for="CreatedDate" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.CreatedDate) <span class="mandatory">*</span></label>

    <div class="col-lg-10">
        <div class="input-group">
            
            <input type="date" name="CreatedDate" id="CreatedDate" class="form-control" placeholder="e.g. CreatedDate" value="@Model.CreatedDate" @ReadOnly("CreatedDate") required data-fv-notempty-message='The Created date is required' data-fv-date-format="DD/MM/YYYY" />
            
        </div>
    </div>
</div>
<div class="form-group @GetFormGroupClass("LastModifiedDate")">
    <label for="LastModifiedDate" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.LastModifiedDate) <span class="mandatory">*</span></label>

    <div class="col-lg-10">
        <div class="input-group">
            
            <input type="date" name="LastModifiedDate" id="LastModifiedDate" class="form-control" placeholder="e.g. LastModifiedDate" value="@Model.LastModifiedDate" @ReadOnly("LastModifiedDate") required data-fv-notempty-message='The Last modified date is required' data-fv-date-format="DD/MM/YYYY" />
            
        </div>
    </div>
</div>
<div class="form-group @GetFormGroupClass("CreatedBy")">
    <label for="CreatedBy" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.CreatedBy) <span class="mandatory">*</span></label>

    <div class="col-lg-10">
        <div class="input-group">
            
            <input type="text" name="CreatedBy" id="CreatedBy" class="form-control" placeholder="e.g. CreatedBy" value="@Model.CreatedBy" @ReadOnly("CreatedBy") required data-fv-notempty-message='The Created by is required' />
            
        </div>
    </div>
</div>
<div class="form-group @GetFormGroupClass("LastModifiedBy")">
    <label for="LastModifiedBy" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.LastModifiedBy) <span class="mandatory">*</span></label>

    <div class="col-lg-10">
        <div class="input-group">
            
            <input type="text" name="LastModifiedBy" id="LastModifiedBy" class="form-control" placeholder="e.g. LastModifiedBy" value="@Model.LastModifiedBy" @ReadOnly("LastModifiedBy") required data-fv-notempty-message='The Last modified by is required' />
            
        </div>
    </div>
</div>


@functions
{
    bool IsKey(string propertyName)
    {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        return T4Helper.GetKeys(entityType).Any(p => p.Name == propertyName);
    }

    string ReadOnly(string propertyName)
    {
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        if (formType == FormType.Edit && IsKey(propertyName)) return "readonly";

        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);

        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>(prop, entityType);
        if (computedAttribute == null) return string.Empty;

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "readonly";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "readonly";

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "readonly";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "readonly";

        return string.Empty;
    }

    string GetFormGroupClass(string propertyName)
    {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>(prop, entityType);
        if (computedAttribute == null) return string.Empty;

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "hidden";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "hidden";

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "hidden";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "hidden";

        switch (formType)
        {
            case FormType.Create:
                {
                    if (computedAttribute.ComputedPropertyType == ComputedPropertyType.Status) return "hidden";
                    if (computedAttribute.ComputedPropertyType == ComputedPropertyType.AutoIncrement) return "hidden";
                    if (computedAttribute.ComputedPropertyType == ComputedPropertyType.Computed) return "hidden";
                    break;
                }
        }
        return string.Empty;
    }
}
