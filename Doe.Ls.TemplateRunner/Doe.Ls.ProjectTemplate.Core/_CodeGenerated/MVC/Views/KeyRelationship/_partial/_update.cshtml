@using Doe.Ls.EntityBase.MVCExtensions
@model KeyRelationship
@{
    var user = ViewBagWrapper.UserInfoExtensionBag.GetCurrentUser(ViewData);
    var task = ViewBagWrapper.TaskBag.GetCurrentTask(ViewData); 
    var formMethod = ViewBagWrapper.FormOperations.GetFormMethod(ViewData);
    
    var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
    var requestType = ViewBagWrapper.FormOperations.GetRequestType(ViewData);
        var roleDescriptionItems = ViewBagWrapper.ListBag.GetList("roleDescriptionItems",ViewData);
    var relationshipScopeItems = ViewBagWrapper.ListBag.GetList("relationshipScopeItems",ViewData);
    
}
@Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.KeyRelationshipId)
@if(formType==FormType.Edit)  {
    <div class="form-group @GetFormGroupClass("KeyRelationshipId")">
        <label class="col-lg-4 ">@Html.DisplayNameFor(model => model.KeyRelationshipId) </label>
        <div class="col-lg-8">            <p class="form-control-plaintext">@Html.DisplayFor(model => model.KeyRelationshipId)</p>        </div>
    </div>
}                       
                                    

                                     

                          <div class="form-group @GetFormGroupClass("OrderNumber")">
  <label for="OrderNumber" class="col-lg-4">@Html.DisplayNameFor(model => model.OrderNumber) </label>
  <input type="number" name="OrderNumber" id="OrderNumber" class="form-control col-lg-8" placeholder="e.g. Order number" value="@Model.OrderNumber"@ReadOnly("OrderNumber")      data-fv-integer-message='The Order number is not an integer' /> 
</div>
                                    

                                     

                          <div class="form-group @GetFormGroupClass("DateCreated")">
  <label for="DateCreated" class="col-lg-4">@Html.DisplayNameFor(model => model.DateCreated) <span class="mandatory">*</span></label>
  <input type="date" name="DateCreated" id="DateCreated" class="form-control col-lg-8" placeholder="e.g. Date created" value="@Model.DateCreated"@ReadOnly("DateCreated")  required data-fv-notempty-message='The Date created is required'  data-fv-date-format="DD/MM/YYYY"   /> 
</div>
                         <div class="form-group @GetFormGroupClass("ModifiedUserName")">
  <label for="ModifiedUserName" class="col-lg-4">@Html.DisplayNameFor(model => model.ModifiedUserName) <span class="mandatory">*</span></label>
  <input type="text" name="ModifiedUserName" id="ModifiedUserName" class="form-control col-lg-8" placeholder="e.g. Modified user name" value="@Model.ModifiedUserName"@ReadOnly("ModifiedUserName")  required data-fv-notempty-message='The Modified user name is required'     /> 
</div>
                         <div class="form-group @GetFormGroupClass("LastUpdated")">
  <label for="LastUpdated" class="col-lg-4">@Html.DisplayNameFor(model => model.LastUpdated) <span class="mandatory">*</span></label>
  <input type="date" name="LastUpdated" id="LastUpdated" class="form-control col-lg-8" placeholder="e.g. Last updated" value="@Model.LastUpdated"@ReadOnly("LastUpdated")  required data-fv-notempty-message='The Last updated is required'  data-fv-date-format="DD/MM/YYYY"   /> 
</div>
 
  
@functions
{
    bool IsKey(string propertyName) 
    {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        return T4Helper.GetKeys(entityType).Any(p => p.Name == propertyName);
    }

    string ReadOnly(string propertyName) 
    {
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        if (formType == FormType.Edit && IsKey(propertyName)) return "readonly";

        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        
        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>(prop, entityType);
        if (computedAttribute == null) return string.Empty;

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "readonly";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "readonly";

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "readonly";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "readonly";
        
        return string.Empty;
    }

    string GetFormGroupClass(string propertyName) 
    {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>(prop, entityType);
        if (computedAttribute == null) return string.Empty;

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "hidden";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "hidden";

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "hidden";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "hidden";

        switch (formType)
        {
            case FormType.Create:
            {
                if (computedAttribute.ComputedPropertyType == ComputedPropertyType.Status) return "hidden";
                if (computedAttribute.ComputedPropertyType == ComputedPropertyType.AutoIncrement) return "hidden";
                if (computedAttribute.ComputedPropertyType == ComputedPropertyType.Computed) return "hidden";
                break;
            }
        }
        return string.Empty;        
    }    
}




