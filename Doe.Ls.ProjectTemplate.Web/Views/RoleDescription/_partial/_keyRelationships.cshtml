@model Doe.Ls.ProjectTemplate.Data.RoleDescription
@{
    var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
    var task = ViewBagWrapper.TaskBag.GetCurrentTask(ViewData);
    var workflowEngine = ViewBagWrapper.WorkflowBag.GetWorkflowEngine(ViewData);
    var access = workflowEngine.GetWorkflowObjectPrivilege();
}
<div id="formTab-keyrelationship" class="card.card-body">
    <form class="" data-tracking-enabled="false" role="form" method="GET" 
          id="form-roleDescription-KeyRelationshipList">
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.RoleDescriptionId)
        @Html.Hidden("FormType", formType)
@if(access.CanEdit || access.CanCreate || access.FullControl) { 
        <a href="@Url.Action("Create", "KeyRelationship", new {roleDescId = Model.RoleDescriptionId, ajax = true})"
            class="btn btn-primary pop-up-key-relationship" data-toggle="modal" data-target="#vlePluginModal">
            Add a key relationship
        </a>
}
        <!--table-->
        <div class="row-fluid table-responsive">
            <table class="table table-striped table-sm dt-responsive ajaxDataTable" data-service="keyRelationshipService"
    data-url="@HttpHelper.GetActionUrl("ListJsonKeyRelationships", "RoleDescription", new { id = Model.RoleDescriptionId })"               
    >
               
                <thead>
                <tr>
                    <th width="10%">Scope</th>
                    <th  width="20%">Who</th>
                    <th  width="50%">Why</th>
                    <th  width="10%">Last updated</th>
                    <th class="all"  width="10%"></th>
                </tr>
                
                </thead>
                <tbody>
                @* For ajax dataTable empty the tbody *@
                    @*@foreach (var item in Model.KeyRelationships)
                    {
                        var styleType = "";
                        if (item.RelationshipScope.ScopeId == (int) Enums.ScopeType.Internal)
                        {
                            styleType = "internal";
                        }
                        else if (item.RelationshipScope.ScopeId == (int) Enums.ScopeType.External)
                        {
                            styleType = "external";
                        }
                        <tr class="keyRelationshipsBody">
                            <td class="scopeHeading @styleType">@item.RelationshipScope.ScopeTitle</td>
                            <td>
                                @Html.Raw(item.Who)
                            </td>
                            <td>
                                @Html.Raw(item.Why)
                            </td>
                            <td>
                                @item.LastUpdated.ToEasyDateTimeFormat()
                            </td>
                            <td>
                                <div class="btn-group-vertical">
                                    <a href="@Url.Action("Edit", "KeyRelationship", new {id = item.KeyRelationshipId, ajax = true})"
                                       class="btn btn-primary pop-up-key-relationship" data-toggle="modal" data-target="#vlePluginModal">Edit</a>
                                    <a href="@Url.Action("Details", "KeyRelationship",
                                             new {id = item.KeyRelationshipId, ajax = true})"
                                       class="btn btn-primary pop-up-key-relationship" data-toggle="modal" data-target="#vlePluginModal">Details</a>
                                    <a href="@Url.Action("Delete", "KeyRelationship",
                                             new {id = item.KeyRelationshipId, ajax = true})"
                                       class="btn btn-primary pop-up-key-relationship" data-toggle="modal" data-target="#vlePluginModal">Delete</a>
                                </div>
                            </td>
                        </tr>
                    }*@
                   
                </tbody>
            </table>

           
        </div>
        <div class="col-lg-offset-2">
            <p>
                <a href="@Url.Action("ManageCapabilities", "RoleDescription",new {id=Model.RoleDescriptionId})" class="btn btn-primary"> Next</a>
            </p>
        </div>
    </form>
</div>
@functions{
    bool IsKey(string propertyName)
    {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        return T4Helper.GetKeys(entityType).Any(p => p.Name == propertyName);
    }
    string ReadOnly(string propertyName)
    {
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        if (formType == FormType.Edit && IsKey(propertyName)) return "readonly";

        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);

        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>
    (prop, entityType);
        if (computedAttribute == null) return string.Empty;

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "readonly";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "readonly";

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "readonly";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "readonly";

        return string.Empty;
    }

    string GetFormGroupClass(string propertyName)
    {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>
            (prop, entityType);
        if (computedAttribute == null) return string.Empty;

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "hidden";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "hidden";

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "hidden";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "hidden";

        switch (formType)
        {
            case FormType.Create:
                {
                    if (computedAttribute.ComputedPropertyType == ComputedPropertyType.Status) return "hidden";
                    if (computedAttribute.ComputedPropertyType == ComputedPropertyType.AutoIncrement) return "hidden";
                    if (computedAttribute.ComputedPropertyType == ComputedPropertyType.Computed) return "hidden";
                    break;
                }
        }
        return string.Empty;
    }
    

}
