@model LookupFocusGradeCriteria
@{
    var user = ViewBagWrapper.UserInfoExtensionBag.GetCurrentUser(ViewData);
    var task = ViewBagWrapper.TaskBag.GetCurrentTask(ViewData); 
    var formMethod = ViewBagWrapper.FormOperations.GetFormMethod(ViewData);
    
    var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
    var requestType = ViewBagWrapper.FormOperations.GetRequestType(ViewData);
        var focusItems = ViewBagWrapper.ListBag.GetList("focusItems",ViewData);
    var gradeItems = ViewBagWrapper.ListBag.GetList("gradeItems",ViewData);
    var selectionCriteriaItems = ViewBagWrapper.ListBag.GetList("selectionCriteriaItems",ViewData);
    
}

@Html.AntiForgeryToken()
@Html.HiddenFor(model=>model.LookupId)
@*<div class="form-group @GetFormGroupClass("LookupId")">
    <label for="LookupId" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.LookupId) <span class="mandatory">*</span></label>
    
<div class="col-lg-10">
    <div class="input-group">
                  
                <input type="number" name="LookupId" id="LookupId" class="form-control" placeholder="e.g. LookupId" value="@Model.LookupId"  @ReadOnly("LookupId")  required data-fv-notempty-message='The Lookup id is required'    data-fv-integer-message='The Lookup id is not an integer'/>
                  
                        </div>
    </div>
</div> *@
<div class="form-group @GetFormGroupClass("GradeCode")">
    <label for="GradeCode" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.Grade) <span class="mandatory">*</span></label>

    <div class="col-lg-10">
        @Html.DropDownList("GradeCode", gradeItems, "Select Grade ...", new { id = "GradeCode", @class = "form-control select2picker", Required = "Required" })
    </div>
</div>
<div class="form-group @GetFormGroupClass("FocusId")">
        <label for="FocusId" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.Focus) <span class="mandatory">*</span></label>

<div class="col-lg-10">
        @Html.DropDownList("FocusId", focusItems , "Select Focus ...", new {id="FocusId", @class = "form-control select2picker", Required="Required" })      
    </div>
</div>                      
                       
<div class="form-group @GetFormGroupClass("SelectionCriteriaId")">
        <label for="SelectionCriteriaId" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.SelectionCriteria) <span class="mandatory">*</span></label>

<div class="col-lg-10">
        @Html.DropDownList("SelectionCriteriaId", selectionCriteriaItems , "Select Selection criteria ...", new {id="SelectionCriteriaId", @class = "form-control select2picker", Required="Required" })      
    </div>
</div>


<div class="form-group @GetFormGroupClass("IsMandatory")">
    <label for="Highlighted" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.IsMandatory) </label>

    <div class="col-lg-4">
        <div class="checkbox">
            <label>
                <input type="checkbox" name="IsMandatory" id="IsMandatory" checked="@Model.IsMandatory" @ReadOnly("IsMandatory") />
            </label>
        </div>
    </div>
</div>

       


@functions
{
    bool IsKey(string propertyName) 
    {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        return T4Helper.GetKeys(entityType).Any(p => p.Name == propertyName);
    }

    string ReadOnly(string propertyName) 
    {
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        if (formType == FormType.Edit && IsKey(propertyName)) return "readonly";

        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        
        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>(prop, entityType);
        if (computedAttribute == null) return string.Empty;

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "readonly";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "readonly";

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "readonly";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "readonly";
        
        return string.Empty;
    }

    string GetFormGroupClass(string propertyName) 
    {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>(prop, entityType);
        if (computedAttribute == null) return string.Empty;

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "hidden";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "hidden";

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "hidden";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "hidden";

        switch (formType)
        {
            case FormType.Create:
            {
                if (computedAttribute.ComputedPropertyType == ComputedPropertyType.Status) return "hidden";
                if (computedAttribute.ComputedPropertyType == ComputedPropertyType.AutoIncrement) return "hidden";
                if (computedAttribute.ComputedPropertyType == ComputedPropertyType.Computed) return "hidden";
                break;
            }
        }
        return string.Empty;        
    }    
}
