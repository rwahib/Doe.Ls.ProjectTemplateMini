


@using Doe.Ls.EntityBase.MVCExtensions
@model AppEntityType
@{
    var user = ViewBagWrapper.UserInfoExtensionBag.GetCurrentUser(ViewData);
    var task = ViewBagWrapper.TaskBag.GetCurrentTask(ViewData); 
    var formMethod = ViewBagWrapper.FormOperations.GetFormMethod(ViewData);
    
    var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
    var requestType = ViewBagWrapper.FormOperations.GetRequestType(ViewData);
        
}

@Html.AntiForgeryToken()

<div class="form-group @GetFormGroupClass("EntityTypeId")">
    <label for="EntityTypeId" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.EntityTypeId) <span class="mandatory">*</span></label>
    
<div class="col-lg-10">
    <div class="form-group">
                  
                <input type="number" name="EntityTypeId" id="EntityTypeId" class="form-control" placeholder="e.g. EntityTypeId" value="@Model.EntityTypeId"  @ReadOnly("EntityTypeId")  required data-fv-notempty-message='The Entity type id is required'    data-fv-integer-message='The Entity type id is not an integer'/>
                  
                        </div>
    </div>
</div>                       
<div class="form-group @GetFormGroupClass("EntityApiName")">
    <label for="EntityApiName" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.EntityApiName) <span class="mandatory">*</span></label>
    
<div class="col-lg-10">
    <div class="form-group">
                  
                <input type="text" name="EntityApiName" id="EntityApiName" class="form-control" placeholder="e.g. EntityApiName" value="@Model.EntityApiName"  @ReadOnly("EntityApiName")  required data-fv-notempty-message='The Entity api name is required'    />
                  
                        </div>
    </div>
</div>                       
<div class="form-group @GetFormGroupClass("EntityTitle")">
    <label for="EntityTitle" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.EntityTitle) <span class="mandatory">*</span></label>
    
<div class="col-lg-10">
    <div class="form-group">
                  
                <input type="text" name="EntityTitle" id="EntityTitle" class="form-control" placeholder="e.g. EntityTitle" value="@Model.EntityTitle"  @ReadOnly("EntityTitle")  required data-fv-notempty-message='The Entity title is required'    />
                  
                        </div>
    </div>
</div>                       
<div class="form-group @GetFormGroupClass("EntityDescription")">
    <label for="EntityDescription" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.EntityDescription) </label>
    
<div class="col-lg-10">
    <div class="form-group">
                  
                <textarea name="EntityDescription" id="EntityDescription" class="form-control " placeholder="e.g. EntityDescription"
                        >@Model.EntityDescription  </textarea>
                  
                        </div>
    </div>
</div>                       
<div class="form-group @GetFormGroupClass("SysAdminDashboard")">
    <label for="SysAdminDashboard" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.SysAdminDashboard) <span class="mandatory">*</span></label>
    
<div class="col-lg-4">
        <div class="form-check">
            <label class="form-check-label">
                <input class="form-check-input"  type="checkbox" name="SysAdminDashboard" id="SysAdminDashboard" checked="@Model.SysAdminDashboard" @ReadOnly("SysAdminDashboard")/>
            </label>
        </div>
    </div>
</div>
<div class="form-group @GetFormGroupClass("PowerUserDashboard")">
    <label for="PowerUserDashboard" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.PowerUserDashboard) <span class="mandatory">*</span></label>
    
<div class="col-lg-4">
        <div class="form-check">
            <label class="form-check-label">
                <input class="form-check-input"  type="checkbox" name="PowerUserDashboard" id="PowerUserDashboard" checked="@Model.PowerUserDashboard" @ReadOnly("PowerUserDashboard")/>
            </label>
        </div>
    </div>
</div>
<div class="form-group @GetFormGroupClass("HighPriority")">
    <label for="HighPriority" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.HighPriority) <span class="mandatory">*</span></label>
    
<div class="col-lg-4">
        <div class="form-check">
            <label class="form-check-label">
                <input class="form-check-input"  type="checkbox" name="HighPriority" id="HighPriority" checked="@Model.HighPriority" @ReadOnly("HighPriority")/>
            </label>
        </div>
    </div>
</div>


@functions
{
    bool IsKey(string propertyName) 
    {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        return T4Helper.GetKeys(entityType).Any(p => p.Name == propertyName);
    }

    string ReadOnly(string propertyName) 
    {
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        if (formType == FormType.Edit && IsKey(propertyName)) return "readonly";

        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        
        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>(prop, entityType);
        if (computedAttribute == null) return string.Empty;

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "readonly";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "readonly";

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "readonly";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "readonly";
        
        return string.Empty;
    }

    string GetFormGroupClass(string propertyName) 
    {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>(prop, entityType);
        if (computedAttribute == null) return string.Empty;

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "hidden";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "hidden";

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "hidden";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "hidden";

        switch (formType)
        {
            case FormType.Create:
            {
                if (computedAttribute.ComputedPropertyType == ComputedPropertyType.Status) return "hidden";
                if (computedAttribute.ComputedPropertyType == ComputedPropertyType.AutoIncrement) return "hidden";
                if (computedAttribute.ComputedPropertyType == ComputedPropertyType.Computed) return "hidden";
                break;
            }
        }
        return string.Empty;        
    }    
}
