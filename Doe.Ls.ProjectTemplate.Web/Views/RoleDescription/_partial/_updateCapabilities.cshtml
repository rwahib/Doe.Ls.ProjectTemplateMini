@model RoleDescription
@{
    var gradeItems = ViewBagWrapper.ListBag.GetList("gradesItems", ViewData);
    var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
    var task = ViewBagWrapper.TaskBag.GetCurrentTask(ViewData);
    
    var capabilityLevelItems = ViewBagWrapper.ListBag.GetList("capabilityLevelItems", ViewData);

    var capabilityGroupItems = (List<CapabilityGroupLight>)ViewBagWrapper.ListBag.GetCapabilityGroupList(ViewData);

    var isManagerChecked = "";
    if (Model.ManagerRole.HasValue && Model.ManagerRole.Value)
        {
        isManagerChecked = "checked";
        }

}


<div id="formTab" class="card.card-body">
    <form class="" data-tracking-enabled="true" role="form" method="POST" 
          action="@Url.Action("SaveCapabilities")" id="form-roleDescription-createCapabilities">
        @Html.AntiForgeryToken()
        @Html.Hidden("FormType", formType)
        <input type="hidden" name="RoleDescriptionId" id="RoleDescriptionId" value="@Model.RoleDescriptionId" />
        <button type="submit" id="Save" class="btn btn-primary">Save</button>
        &nbsp;|&nbsp;
        <a href="@Url.Action("ManageCapabilities", new {id = Model.RoleDescriptionId})" class="btn btn-primary">Cancel <span class="glyphicon glyphicon-th-list"></span></a>

        <!--table-->
        <div class="container-fluid" id="updateCapabilityTable">
            <div id="matrixGuide" class="row-fluid fixedFloating">
                @{ Html.RenderPartial("~/views/RoleDescription/_partial/_guideMatrix.cshtml"); }
            </div>

                @if (capabilityGroupItems != null && capabilityGroupItems.Count > 0)
            {
                    <div class="row-fluid">
                        <div class="col-lg-10">
                            <h3>NSW Public Sector Capability Framework</h3>
                        </div>
                        <div class="col-lg-2 float-right managerRole">
                            Manager role <input type="checkbox" name="ManagerRole" Id="ManagerRole" value="@Model.ManagerRole" @isManagerChecked />
                        </div>
                    </div>
                    <div class="row-fluid subheading">
                        <div class="col-lg-3 font-bold rc_Column">Group & capability</div>
                        <div class="col-lg-3 font-bold rc_Column">Level</div>
                        <div class="col-lg-1 font-bold rc_Column">Focus</div>
                        <div class="col-lg-5 font-bold">Behavioural indicators</div>
                    </div>


                    foreach (var rc in capabilityGroupItems)
                    {
                        var groupNameNoSpace = rc.GroupName.Replace(" ", "");

                        <div class="row-fluid rc_group @groupNameNoSpace">
                            <div class="col-lg-12 font-bold top-buffer" id="@rc.CapabilityGroupId">
                                @rc.GroupName @if (rc.CapabilityGroupId == (int) Enums.CapablityGroup.OccupationSpecific)
                                              {
                                                  <span>(optional)</span>
                                              }
                            </div>

                        </div>
                        <div class="row-fluid rc_body @groupNameNoSpace">
                            <div class="col-lg-12 top-buffer">
                                @foreach (var cn in rc.CapabilityNames.OrderBy(r=>r.CapabilityNameId))
                                {
                                    <div class="row-fluid rc_height ">
                                        <div class="col-lg-3">@cn.Name</div>
                                        <div class="col-lg-3">
                                            <select id="CapabilityLevelId_@cn.CapabilityNameId" name="CapabilityLevelId_@cn.CapabilityNameId"
                                                    class="form-control select2picker" allowclear="true" data-placeholder="Please select a level"
                                                    data-groupid="@rc.CapabilityGroupId">
                                                <option></option>
                                                @foreach (var item in capabilityLevelItems)
                                                {
                                                    if (cn.LevelId + "" == item.Value)
                                                    {
                                                        <option selected value="@item.Value">@item.Text</option>
                                                    }
                                                    else
                                                    {
                                                        <option value="@item.Value">@item.Text</option>
                                                    }
                                                }
                                            </select>
                                        </div>

                                        <div class="col-lg-1">
                                            <input type="checkbox" name="Highlighted_@cn.CapabilityNameId" id="Highlighted_@cn.CapabilityNameId"
                                                   checked="@cn.Highlighted" />
                                        </div>

                                        @{
                                            var x = cn.IndContext;
                                        }

                                        <div class="col-lg-5 indContext bulletPoints" id="indContext_@cn.CapabilityNameId"> @Html.Raw(x)</div>
                                    </div>

                                            }
                            </div>
                        </div>
                                                }
                                            }
                <div class="row rc_bottom "></div>

            </div>
        <br>

        <p>
            <button type="submit" id="Save2" class="btn btn-primary">Save</button>
            &nbsp;|&nbsp;
            <a href="@Url.Action("ManageCapabilities", new {id = Model.RoleDescriptionId})" class="btn btn-primary">Cancel <span class="glyphicon glyphicon-th-list"></span></a>
        </p>

</form>
</div>
@functions{
    bool IsKey(string propertyName)
    {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        return T4Helper.GetKeys(entityType).Any(p => p.Name == propertyName);
    }
    string ReadOnly(string propertyName)
    {
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        if (formType == FormType.Edit && IsKey(propertyName)) return "readonly";

        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);

        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>
    (prop, entityType);
        if (computedAttribute == null) return string.Empty;

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "readonly";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "readonly";

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "readonly";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "readonly";

        return string.Empty;
    }

    string GetFormGroupClass(string propertyName)
    {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>
            (prop, entityType);
        if (computedAttribute == null) return string.Empty;

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "hidden";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "hidden";

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "hidden";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "hidden";

        switch (formType)
        {
            case FormType.Create:
                {
                    if (computedAttribute.ComputedPropertyType == ComputedPropertyType.Status) return "hidden";
                    if (computedAttribute.ComputedPropertyType == ComputedPropertyType.AutoIncrement) return "hidden";
                    if (computedAttribute.ComputedPropertyType == ComputedPropertyType.Computed) return "hidden";
                    break;
                }
        }
        return string.Empty;
    }

    private string getImage(List<RoleCapability> capabilityNames)
    {
        if (capabilityNames.Any())
            return capabilityNames.FirstOrDefault().CapabilityName.CapabilityGroup.GroupImage;

        return string.Empty;
    }

}
