<#@ template language="C#"inherits="MVCTemplate.BaseTemplate" #> 
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<#@ import namespace="Doe.Ls.EntityBase.Helper" #>
<#@ parameter name="EntityType" type="System.Data.Entity.Core.Metadata.Edm.EntityType"#>
<#@ parameter name="AppNamespace" type="System.String"#>
<#@ parameter name="EntityContext" type="System.Data.Entity.DbContext"#>

<# T4Helper.SetAssemblyClassNameFormatFromContext(EntityContext); #>

<#    

var helper=new EdmMetadataHelper(EntityContext);    
#>
using Doe.Ls.EntityBase.BLLBase;
using Doe.Ls.EntityBase.Logging;
using Doe.Ls.EntityBase.RepositoryBase;
using Doe.Ls.EntityBase.SessionService;
using <#=AppNamespace#>.Core.BL.DomainServices;
using <#=AppNamespace#>.Core.BL.EntityRepositories;
using <#=AppNamespace#>.Data;


namespace <#=AppNamespace#>.Core.BL 
{
    public partial class ServiceRepository 
    {
        private readonly IRepositoryFactory _repositoryFactory;

        public IRepositoryFactory RepositoryFactory 
        {
            get { return _repositoryFactory; }
        }

        public ServiceRepository(IRepositoryFactory factory) 
        {
            _repositoryFactory = factory;
        }

    
        #region Entity services

        public IUnitOfWork GetUnitOfWork(params ResolverOverride[] overrides)
        {
            return _repositoryFactory.GetService<IUnitOfWork>();
        }

<#      foreach(var entityType in helper.GetEntityList())
        { 
            if(entityType.Name.ToLower().Contains("sysdia"))continue; #>

        public <#=T4Helper.CleanClassName(entityType.Name)#>Repository <#=T4Helper.CleanClassName(entityType.Name)#>Repository(params ResolverOverride[] overrides) 
        {
            return _repositoryFactory.GetService<IRepository<<#=entityType.Name#>>>(overrides) as <#=T4Helper.CleanClassName(entityType.Name)#>Repository;
        }
        
<#    }//foreach #>
        #endregion
    }
}