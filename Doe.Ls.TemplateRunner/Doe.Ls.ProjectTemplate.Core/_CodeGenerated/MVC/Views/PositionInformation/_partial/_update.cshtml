@using Doe.Ls.EntityBase.MVCExtensions
@model PositionInformation
@{
    var user = ViewBagWrapper.UserInfoExtensionBag.GetCurrentUser(ViewData);
    var task = ViewBagWrapper.TaskBag.GetCurrentTask(ViewData); 
    var formMethod = ViewBagWrapper.FormOperations.GetFormMethod(ViewData);
    
    var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
    var requestType = ViewBagWrapper.FormOperations.GetRequestType(ViewData);
        var positionItems = ViewBagWrapper.ListBag.GetList("positionItems",ViewData);
    var positionTypeItems = ViewBagWrapper.ListBag.GetList("positionTypeItems",ViewData);
    var employeeTypeItems = ViewBagWrapper.ListBag.GetList("employeeTypeItems",ViewData);
    var positionStatusValueItems = ViewBagWrapper.ListBag.GetList("positionStatusValueItems",ViewData);
    var occupationTypeItems = ViewBagWrapper.ListBag.GetList("occupationTypeItems",ViewData);
    
}
@Html.AntiForgeryToken()
                                    

                          <div class="form-group @GetFormGroupClass("OlderPositionNumber3")">
  <label for="OlderPositionNumber3" class="col-lg-4">@Html.DisplayNameFor(model => model.OlderPositionNumber3) </label>
  <input type="text" name="OlderPositionNumber3" id="OlderPositionNumber3" class="form-control col-lg-8" placeholder="e.g. Older position number3" value="@Model.OlderPositionNumber3"@ReadOnly("OlderPositionNumber3")       /> 
</div>
                         <div class="form-group @GetFormGroupClass("OlderPositionNumber1")">
  <label for="OlderPositionNumber1" class="col-lg-4">@Html.DisplayNameFor(model => model.OlderPositionNumber1) </label>
  <input type="text" name="OlderPositionNumber1" id="OlderPositionNumber1" class="form-control col-lg-8" placeholder="e.g. Older position number1" value="@Model.OlderPositionNumber1"@ReadOnly("OlderPositionNumber1")       /> 
</div>
                         <div class="form-group @GetFormGroupClass("OlderPositionNumber2")">
  <label for="OlderPositionNumber2" class="col-lg-4">@Html.DisplayNameFor(model => model.OlderPositionNumber2) </label>
  <input type="text" name="OlderPositionNumber2" id="OlderPositionNumber2" class="form-control col-lg-8" placeholder="e.g. Older position number2" value="@Model.OlderPositionNumber2"@ReadOnly("OlderPositionNumber2")       /> 
</div>
                         <div class="form-group @GetFormGroupClass("SchNumber")">
  <label for="SchNumber" class="col-lg-4">@Html.DisplayNameFor(model => model.SchNumber) </label>
  <input type="text" name="SchNumber" id="SchNumber" class="form-control col-lg-8" placeholder="e.g. Sch number" value="@Model.SchNumber"@ReadOnly("SchNumber")       /> 
</div>
                                    

                                     

                          <div class="form-group @GetFormGroupClass("PositionNoteId")">
  <label for="PositionNoteId" class="col-lg-4">@Html.DisplayNameFor(model => model.PositionNoteId) </label>
  <input type="number" name="PositionNoteId" id="PositionNoteId" class="form-control col-lg-8" placeholder="e.g. Position note id" value="@Model.PositionNoteId"@ReadOnly("PositionNoteId")      data-fv-integer-message='The Position note id is not an integer' /> 
</div>
                         <div class="form-group @GetFormGroupClass("TrimLink")">
  <label for="TrimLink" class="col-lg-4">@Html.DisplayNameFor(model => model.TrimLink) </label>
  <input type="text" name="TrimLink" id="TrimLink" class="form-control col-lg-8" placeholder="e.g. Trim link" value="@Model.TrimLink"@ReadOnly("TrimLink")       /> 
</div>
                         <div class="form-group @GetFormGroupClass("PositionEndDate")">
  <label for="PositionEndDate" class="col-lg-4">@Html.DisplayNameFor(model => model.PositionEndDate) </label>
  <input type="date" name="PositionEndDate" id="PositionEndDate" class="form-control col-lg-8" placeholder="e.g. Position end date" value="@Model.PositionEndDate"@ReadOnly("PositionEndDate")    data-fv-date-format="DD/MM/YYYY"   /> 
</div>
                         <div class="form-group @GetFormGroupClass("PositionFTE")">
  <label for="PositionFTE" class="col-lg-4">@Html.DisplayNameFor(model => model.PositionFTE) <span class="mandatory">*</span></label>
  <input type="text" name="PositionFTE" id="PositionFTE" class="form-control col-lg-8" placeholder="e.g. Position f t e" value="@Model.PositionFTE"@ReadOnly("PositionFTE")  required data-fv-notempty-message='The Position f t e is required'     /> 
</div>
                                    

                                     

                                     

  
  
@functions
{
    bool IsKey(string propertyName) 
    {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        return T4Helper.GetKeys(entityType).Any(p => p.Name == propertyName);
    }

    string ReadOnly(string propertyName) 
    {
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        if (formType == FormType.Edit && IsKey(propertyName)) return "readonly";

        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        
        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>(prop, entityType);
        if (computedAttribute == null) return string.Empty;

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "readonly";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "readonly";

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "readonly";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "readonly";
        
        return string.Empty;
    }

    string GetFormGroupClass(string propertyName) 
    {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>(prop, entityType);
        if (computedAttribute == null) return string.Empty;

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "hidden";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "hidden";

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "hidden";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "hidden";

        switch (formType)
        {
            case FormType.Create:
            {
                if (computedAttribute.ComputedPropertyType == ComputedPropertyType.Status) return "hidden";
                if (computedAttribute.ComputedPropertyType == ComputedPropertyType.AutoIncrement) return "hidden";
                if (computedAttribute.ComputedPropertyType == ComputedPropertyType.Computed) return "hidden";
                break;
            }
        }
        return string.Empty;        
    }    
}




