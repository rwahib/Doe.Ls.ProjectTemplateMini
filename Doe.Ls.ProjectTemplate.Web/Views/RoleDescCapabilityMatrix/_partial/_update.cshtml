@model RoleDescCapabilityMatrix
@{
    var user = ViewBagWrapper.UserInfoExtensionBag.GetCurrentUser(ViewData);
    var task = ViewBagWrapper.TaskBag.GetCurrentTask(ViewData);
    var formMethod = ViewBagWrapper.FormOperations.GetFormMethod(ViewData);

    var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
    var requestType = ViewBagWrapper.FormOperations.GetRequestType(ViewData);
    var gradeItems = ViewBagWrapper.ListBag.GetList("gradeItems",  ViewData);

}

@Html.AntiForgeryToken()

<div class="form-group @GetFormGroupClass("GradeCode")">
    <label for="GradeCode" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.GradeCode) <span class="mandatory">*</span></label>
    
<div class="col-lg-10">
    <div class="input-group">
        
        @if (formType == FormType.Create)
        {
            @Html.DropDownList("GradeCode", gradeItems, "Select Grade ...", new { id = "GradeCode", @class = "form-control select2picker", Required = "Required" })
        }
        else
        {
            <input type="text" name="GradeCode" id="GradeCode" class="form-control" placeholder="Please enter Grade code" value="@Model.GradeCode" @ReadOnly("GradeCode") required data-fv-notempty-message='The Grade code is required'/>
        }
        
    </div>
</div>
</div>                       
<div class="form-group @GetFormGroupClass("Foundational_Min")">
    <label for="Foundational_Min" class="col-form-label col-lg-3">Foundational<span class="mandatory">*</span></label>
    <div class="col-lg-9">
        <div class="col-lg-5">
            Min<input type="number" name="Foundational_Min" id="Foundational_Min" class="form-control col-lg-5" placeholder="Please enter minimum point for Foundational" value="@Model.Foundational_Min" @ReadOnly("Foundational_Min") required data-fv-notempty-message='The Foundational  min is required' data-fv-integer-message='The Foundational  min is not an integer'/>
        </div>
        <div class="col-lg-5">
            Max<input type="number" name="Foundational_Max" id="Foundational_Max" class="form-control col-lg-5" placeholder="Please enter maximum point for Foundational" value="@Model.Foundational_Max" @ReadOnly("Foundational_Max") data-fv-integer-message='The Foundational  max is not an integer'/>
        </div>
    </div>
</div>                       
                
<div class="form-group @GetFormGroupClass("Intermediate_Min")">
    <label for="Intermediate_Min" class="col-form-label col-lg-3">Intermediate<span class="mandatory">*</span></label>
    <div class="col-lg-9">
        <div class="col-lg-5">
            Min<input type="number" name="Intermediate_Min" id="Intermediate_Min" class="form-control" placeholder="Please enter minimum point for Intermediate" value="@Model.Intermediate_Min" @ReadOnly("Intermediate_Min") required data-fv-notempty-message='The Intermediate  min is required' data-fv-integer-message='The Intermediate  min is not an integer' />
        </div>
        <div class="col-lg-5">
            Max<input type="number" name="Intermediate_Max" id="Intermediate_Max" class="form-control" placeholder="Please enter maximum point for Intermediate" value="@Model.Intermediate_Max" @ReadOnly("Intermediate_Max") data-fv-integer-message='The Intermediate  max is not an integer' />
        </div>
    </div>
</div>                       
<div class="form-group @GetFormGroupClass("Adept_Min")">
    <label for="Adept_Min" class="col-form-label col-lg-3">Adept <span class="mandatory">*</span></label>
    <div class="col-lg-9">
        <div class="col-lg-5">
            Min<input type="number" name="Adept_Min" id="Adept_Min" class="form-control" placeholder="Please enter minimum point for Adept" value="@Model.Adept_Min" @ReadOnly("Adept_Min") required data-fv-notempty-message='The Adept  min is required' data-fv-integer-message='The Adept  min is not an integer' />
        </div>
        <div class="col-lg-5">
            Max<input type="number" name="Adept_Max" id="Adept_Max" class="form-control" placeholder="Please enter maximum point for Adept" value="@Model.Adept_Max" @ReadOnly("Adept_Max") data-fv-integer-message='The Adept  max is not an integer' />
        </div>
    </div>
</div>                       
                      
<div class="form-group @GetFormGroupClass("Advanced_Min")">
    <label for="Advanced_Min" class="col-form-label col-lg-3">Advanced <span class="mandatory">*</span></label>

    <div class="col-lg-9">
        <div class="col-lg-5">
            Min<input type="number" name="Advanced_Min" id="Advanced_Min" class="form-control" placeholder="Please enter minimum point for Advanced" value="@Model.Advanced_Min" @ReadOnly("Advanced_Min") required data-fv-notempty-message='The Advanced  min is required' data-fv-integer-message='The Advanced  min is not an integer' />
        </div>
        <div class="col-lg-5">
            Max<input type="number" name="Advanced_Max" id="Advanced_Max" class="form-control" placeholder="Please enter maximum point for Advanced" value="@Model.Advanced_Max" @ReadOnly("Advanced_Max") data-fv-integer-message='The Advanced  max is not an integer' />
        </div>
    </div>
</div>                       
<div class="form-group @GetFormGroupClass("HighlyAdvanced_Min")">
    <label for="HighlyAdvanced_Min" class="col-form-label col-lg-3">Highly Advanced <span class="mandatory">*</span></label>

    <div class="col-lg-9">
        <div class="col-lg-5">
            Min<input type="number" name="HighlyAdvanced_Min" id="HighlyAdvanced_Min" class="form-control" placeholder="Please enter minimum point for HighlyAdvanced" value="@Model.HighlyAdvanced_Min" @ReadOnly("HighlyAdvanced_Min") required data-fv-notempty-message='The Highly advanced  min is required' data-fv-integer-message='The Highly advanced  min is not an integer' />
        </div>
        <div class="col-lg-5">
            Max<input type="number" name="HighlyAdvanced_Max" id="HighlyAdvanced_Max" class="form-control" placeholder="Please enter maximum point for HighlyAdvanced" value="@Model.HighlyAdvanced_Max" @ReadOnly("HighlyAdvanced_Max") data-fv-integer-message='The Highly advanced  max is not an integer' />
        </div>
    </div>
</div>                       
                     
<div class="form-group @GetFormGroupClass("FocusCapabilities_Min")">
    <label for="FocusCapabilities_Min" class="col-form-label col-lg-3">Focus Capabilities <span class="mandatory">*</span></label>
    <div class="col-lg-9">
        <div class="col-lg-5">
            Min<input type="number" name="FocusCapabilities_Min" id="FocusCapabilities_Min" class="form-control" placeholder="Please enter minimum point for FocusCapabilities" value="@Model.FocusCapabilities_Min" @ReadOnly("FocusCapabilities_Min") required data-fv-notempty-message='The Focus capabilities  min is required' data-fv-integer-message='The Focus capabilities  min is not an integer' />
        </div>
        <div class="col-lg-5">
            Max<input type="number" name="FocusCapabilities_Max" id="FocusCapabilities_Max" class="form-control" placeholder="Please enter maximum point for FocusCapabilities" value="@Model.FocusCapabilities_Max" @ReadOnly("FocusCapabilities_Max") data-fv-integer-message='The Focus capabilities  max is not an integer' />
        </div>
    </div>
</div>                       
                      
<div class="form-group @GetFormGroupClass("Notes")">
    <label for="Notes" class="col-form-label col-lg-3">@Html.DisplayNameFor(model => model.Notes)</label>
    
<div class="col-lg-9">
    <div class="input-group">
             
                <textarea name="Notes" id="Notes" class="form-control " placeholder="Please enter Notes">@Model.Notes</textarea>
             
     </div>
    </div>
</div>                       


@functions
{
    bool IsKey(string propertyName) 
    {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        return T4Helper.GetKeys(entityType).Any(p => p.Name == propertyName);
    }

    string ReadOnly(string propertyName) 
    {
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        if (formType == FormType.Edit && IsKey(propertyName)) return "readonly";

        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        
        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>(prop, entityType);
        if (computedAttribute == null) return string.Empty;

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "readonly";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "readonly";

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "readonly";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "readonly";
        
        return string.Empty;
    }

    string GetFormGroupClass(string propertyName) 
    {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>(prop, entityType);
        if (computedAttribute == null) return string.Empty;

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "hidden";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "hidden";

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "hidden";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "hidden";

        switch (formType)
        {
            case FormType.Create:
            {
                if (computedAttribute.ComputedPropertyType == ComputedPropertyType.Status) return "hidden";
                if (computedAttribute.ComputedPropertyType == ComputedPropertyType.AutoIncrement) return "hidden";
                if (computedAttribute.ComputedPropertyType == ComputedPropertyType.Computed) return "hidden";
                break;
            }
        }
        return string.Empty;        
    }    
}
