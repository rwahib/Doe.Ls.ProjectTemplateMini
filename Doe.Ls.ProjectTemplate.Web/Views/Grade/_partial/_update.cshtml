@model Grade
@{
    var user = ViewBagWrapper.UserInfoExtensionBag.GetCurrentUser(ViewData);
    var task = ViewBagWrapper.TaskBag.GetCurrentTask(ViewData);
    var formMethod = ViewBagWrapper.FormOperations.GetFormMethod(ViewData);

    var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
    var requestType = ViewBagWrapper.FormOperations.GetRequestType(ViewData);
    var statusValueItems = ViewBagWrapper.ListBag.GetList("statusValueItems", ViewData);
    var gradeTypeItems = ViewBagWrapper.ListBag.GetList("gradeTypeItems", ViewData);

}

@Html.AntiForgeryToken()

<div class="form-group @GetFormGroupClass("GradeCode")">
    <label for="GradeCode" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.GradeCode) <span class="mandatory">*</span></label>
    
<div class="col-lg-10">
    <div class="input-group">
                  
                <input type="text" name="GradeCode" id="GradeCode" class="form-control" placeholder="Please enter Grade code" value="@Model.GradeCode"  @ReadOnly("GradeCode")  required data-fv-notempty-message='The Grade code is required'    />
                  
                        </div>
    </div>
</div>                       
<div class="form-group @GetFormGroupClass("GradeTitle")">
    <label for="GradeTitle" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.GradeTitle) <span class="mandatory">*</span></label>
    
<div class="col-lg-10">
    <div class="input-group">
                  
                <input type="text" name="GradeTitle" id="GradeTitle" class="form-control" placeholder="Please enter grade title" value="@Model.GradeTitle"  @ReadOnly("GradeTitle")  required data-fv-notempty-message='The Grade title is required'    />
                  
                        </div>
    </div>
</div>                       
<div class="form-group @GetFormGroupClass("Award")">
    <label for="Award" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.Award) </label>
    
<div class="col-lg-10">
    <div class="input-group">
                  
                <textarea name="Award" id="Award" class="form-control " placeholder="Please enter the Award rate">@Model.Award  </textarea>
                  
                        </div>
    </div>
</div>                       
<div class="form-group @GetFormGroupClass("AwardMaxRates")">
    <label for="AwardMaxRates" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.AwardMaxRates) </label>
    
<div class="col-lg-10">
    <div class="input-group">
                  
                <input type="number" name="AwardMaxRates" id="AwardMaxRates" class="form-control" placeholder="Please enter the Award Max rate" value="@Model.AwardMaxRates"  @ReadOnly("AwardMaxRates")    step="0.01"  />
                  
                        </div>
    </div>
</div>                       
<div class="form-group @GetFormGroupClass("TeachingBased")">
    <label for="TeachingBased" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.TeachingBased) </label>
    
<div class="col-lg-4">
        <div class="checkbox">
            <label>
                <input type="checkbox" name="TeachingBased" id="TeachingBased" checked="@Model.TeachingBased" @ReadOnly("TeachingBased")/>
            </label>
        </div>
    </div>
</div>
<div class="form-group @GetFormGroupClass("GradeType")">
    <label for="GradeType" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.GradeType) </label>
    
<div class="col-lg-10">
    @Html.DropDownList("GradeType", gradeTypeItems, "Select Grade type ...", new { id = "GradeType", @class = "form-control select2picker", Required = "Required" })      
    </div>
</div>                       
<div class="form-group @GetFormGroupClass("StatusId")">
        <label for="StatusId" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.StatusValue) <span class="mandatory">*</span></label>

<div class="col-lg-10">
        @Html.DropDownList("StatusId", statusValueItems , "Select Status value ...", new {id="StatusId", @class = "form-control select2picker", Required="Required" })      
    </div>
</div>                       
<div class="form-group @GetFormGroupClass("Message")">
    <label for="Message" class="col-form-label col-lg-2">@Html.DisplayNameFor(model => model.Message) </label>
    
    <div class="col-lg-10">
        <div class="input-group">
             
                <textarea name="Message" id="Message" class="form-control " placeholder="Please enter message">@Model.Message</textarea>
             
        </div>
    </div>
</div>                       


@functions
{
    bool IsKey(string propertyName) 
    {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        return T4Helper.GetKeys(entityType).Any(p => p.Name == propertyName);
    }

    string ReadOnly(string propertyName) 
    {
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        if (formType == FormType.Edit && IsKey(propertyName)) return "readonly";

        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        
        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>(prop, entityType);
        if (computedAttribute == null) return string.Empty;

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "readonly";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "readonly";

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "readonly";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "readonly";
        
        return string.Empty;
    }

    string GetFormGroupClass(string propertyName) 
    {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>(prop, entityType);
        if (computedAttribute == null) return string.Empty;

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "hidden";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "hidden";

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "hidden";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "hidden";

        switch (formType)
        {
            case FormType.Create:
            {
                if (computedAttribute.ComputedPropertyType == ComputedPropertyType.Status) return "hidden";
                if (computedAttribute.ComputedPropertyType == ComputedPropertyType.AutoIncrement) return "hidden";
                if (computedAttribute.ComputedPropertyType == ComputedPropertyType.Computed) return "hidden";
                break;
            }
        }
        return string.Empty;        
    }    
}
