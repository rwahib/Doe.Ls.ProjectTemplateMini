//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Doe.Ls.ProjectTemplate.Core.VleWsLoggerService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CilLoggerServiceSoap", Namespace="http://ws.cli.det.nsw.edu.au/ns/WebServices/")]
    public partial class CilLoggerService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback RegisterDBLogItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback RegisterDBLogItemValuesOperationCompleted;
        
        private System.Threading.SendOrPostCallback RegisterDBLogItemValuesWithCustomCategoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback RegisterEMailLogItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback RegisterEMailLogValuesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDBLogItemListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDBLogByLogIdOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public CilLoggerService() {
            this.Url = global::Doe.Ls.ProjectTemplate.Core.Properties.Settings.Default.Doe_Ls_SampleProject_Core_VleWsLoggerService_CilLoggerService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event RegisterDBLogItemCompletedEventHandler RegisterDBLogItemCompleted;
        
        /// <remarks/>
        public event RegisterDBLogItemValuesCompletedEventHandler RegisterDBLogItemValuesCompleted;
        
        /// <remarks/>
        public event RegisterDBLogItemValuesWithCustomCategoryCompletedEventHandler RegisterDBLogItemValuesWithCustomCategoryCompleted;
        
        /// <remarks/>
        public event RegisterEMailLogItemCompletedEventHandler RegisterEMailLogItemCompleted;
        
        /// <remarks/>
        public event RegisterEMailLogValuesCompletedEventHandler RegisterEMailLogValuesCompleted;
        
        /// <remarks/>
        public event GetDBLogItemListCompletedEventHandler GetDBLogItemListCompleted;
        
        /// <remarks/>
        public event GetDBLogByLogIdCompletedEventHandler GetDBLogByLogIdCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cli.det.nsw.edu.au/ns/WebServices/RegisterDBLogItem", RequestNamespace="http://ws.cli.det.nsw.edu.au/ns/WebServices/", ResponseNamespace="http://ws.cli.det.nsw.edu.au/ns/WebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LogItem RegisterDBLogItem(LogItem logItem) {
            object[] results = this.Invoke("RegisterDBLogItem", new object[] {
                        logItem});
            return ((LogItem)(results[0]));
        }
        
        /// <remarks/>
        public void RegisterDBLogItemAsync(LogItem logItem) {
            this.RegisterDBLogItemAsync(logItem, null);
        }
        
        /// <remarks/>
        public void RegisterDBLogItemAsync(LogItem logItem, object userState) {
            if ((this.RegisterDBLogItemOperationCompleted == null)) {
                this.RegisterDBLogItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterDBLogItemOperationCompleted);
            }
            this.InvokeAsync("RegisterDBLogItem", new object[] {
                        logItem}, this.RegisterDBLogItemOperationCompleted, userState);
        }
        
        private void OnRegisterDBLogItemOperationCompleted(object arg) {
            if ((this.RegisterDBLogItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterDBLogItemCompleted(this, new RegisterDBLogItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cli.det.nsw.edu.au/ns/WebServices/RegisterDBLogItemValues", RequestNamespace="http://ws.cli.det.nsw.edu.au/ns/WebServices/", ResponseNamespace="http://ws.cli.det.nsw.edu.au/ns/WebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LogItem RegisterDBLogItemValues(int applicationID, LogCategory category, LogSeverity severity, LogType logType, string machineName, string userName, string source, string message, string friendlyMessage, string fullDescription, System.DateTime createdDate, LogStatus status) {
            object[] results = this.Invoke("RegisterDBLogItemValues", new object[] {
                        applicationID,
                        category,
                        severity,
                        logType,
                        machineName,
                        userName,
                        source,
                        message,
                        friendlyMessage,
                        fullDescription,
                        createdDate,
                        status});
            return ((LogItem)(results[0]));
        }
        
        /// <remarks/>
        public void RegisterDBLogItemValuesAsync(int applicationID, LogCategory category, LogSeverity severity, LogType logType, string machineName, string userName, string source, string message, string friendlyMessage, string fullDescription, System.DateTime createdDate, LogStatus status) {
            this.RegisterDBLogItemValuesAsync(applicationID, category, severity, logType, machineName, userName, source, message, friendlyMessage, fullDescription, createdDate, status, null);
        }
        
        /// <remarks/>
        public void RegisterDBLogItemValuesAsync(int applicationID, LogCategory category, LogSeverity severity, LogType logType, string machineName, string userName, string source, string message, string friendlyMessage, string fullDescription, System.DateTime createdDate, LogStatus status, object userState) {
            if ((this.RegisterDBLogItemValuesOperationCompleted == null)) {
                this.RegisterDBLogItemValuesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterDBLogItemValuesOperationCompleted);
            }
            this.InvokeAsync("RegisterDBLogItemValues", new object[] {
                        applicationID,
                        category,
                        severity,
                        logType,
                        machineName,
                        userName,
                        source,
                        message,
                        friendlyMessage,
                        fullDescription,
                        createdDate,
                        status}, this.RegisterDBLogItemValuesOperationCompleted, userState);
        }
        
        private void OnRegisterDBLogItemValuesOperationCompleted(object arg) {
            if ((this.RegisterDBLogItemValuesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterDBLogItemValuesCompleted(this, new RegisterDBLogItemValuesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cli.det.nsw.edu.au/ns/WebServices/RegisterDBLogItemValuesWithCustomCate" +
            "gory", RequestNamespace="http://ws.cli.det.nsw.edu.au/ns/WebServices/", ResponseNamespace="http://ws.cli.det.nsw.edu.au/ns/WebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LogItem RegisterDBLogItemValuesWithCustomCategory(int applicationID, LogCategory category, LogSeverity severity, LogType logType, string machineName, string userName, string source, string message, string customCategory, string friendlyMessage, string fullDescription, System.DateTime createdDate, LogStatus status) {
            object[] results = this.Invoke("RegisterDBLogItemValuesWithCustomCategory", new object[] {
                        applicationID,
                        category,
                        severity,
                        logType,
                        machineName,
                        userName,
                        source,
                        message,
                        customCategory,
                        friendlyMessage,
                        fullDescription,
                        createdDate,
                        status});
            return ((LogItem)(results[0]));
        }
        
        /// <remarks/>
        public void RegisterDBLogItemValuesWithCustomCategoryAsync(int applicationID, LogCategory category, LogSeverity severity, LogType logType, string machineName, string userName, string source, string message, string customCategory, string friendlyMessage, string fullDescription, System.DateTime createdDate, LogStatus status) {
            this.RegisterDBLogItemValuesWithCustomCategoryAsync(applicationID, category, severity, logType, machineName, userName, source, message, customCategory, friendlyMessage, fullDescription, createdDate, status, null);
        }
        
        /// <remarks/>
        public void RegisterDBLogItemValuesWithCustomCategoryAsync(int applicationID, LogCategory category, LogSeverity severity, LogType logType, string machineName, string userName, string source, string message, string customCategory, string friendlyMessage, string fullDescription, System.DateTime createdDate, LogStatus status, object userState) {
            if ((this.RegisterDBLogItemValuesWithCustomCategoryOperationCompleted == null)) {
                this.RegisterDBLogItemValuesWithCustomCategoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterDBLogItemValuesWithCustomCategoryOperationCompleted);
            }
            this.InvokeAsync("RegisterDBLogItemValuesWithCustomCategory", new object[] {
                        applicationID,
                        category,
                        severity,
                        logType,
                        machineName,
                        userName,
                        source,
                        message,
                        customCategory,
                        friendlyMessage,
                        fullDescription,
                        createdDate,
                        status}, this.RegisterDBLogItemValuesWithCustomCategoryOperationCompleted, userState);
        }
        
        private void OnRegisterDBLogItemValuesWithCustomCategoryOperationCompleted(object arg) {
            if ((this.RegisterDBLogItemValuesWithCustomCategoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterDBLogItemValuesWithCustomCategoryCompleted(this, new RegisterDBLogItemValuesWithCustomCategoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cli.det.nsw.edu.au/ns/WebServices/RegisterEMailLogItem", RequestNamespace="http://ws.cli.det.nsw.edu.au/ns/WebServices/", ResponseNamespace="http://ws.cli.det.nsw.edu.au/ns/WebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LogItem RegisterEMailLogItem(LogItem logItem) {
            object[] results = this.Invoke("RegisterEMailLogItem", new object[] {
                        logItem});
            return ((LogItem)(results[0]));
        }
        
        /// <remarks/>
        public void RegisterEMailLogItemAsync(LogItem logItem) {
            this.RegisterEMailLogItemAsync(logItem, null);
        }
        
        /// <remarks/>
        public void RegisterEMailLogItemAsync(LogItem logItem, object userState) {
            if ((this.RegisterEMailLogItemOperationCompleted == null)) {
                this.RegisterEMailLogItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterEMailLogItemOperationCompleted);
            }
            this.InvokeAsync("RegisterEMailLogItem", new object[] {
                        logItem}, this.RegisterEMailLogItemOperationCompleted, userState);
        }
        
        private void OnRegisterEMailLogItemOperationCompleted(object arg) {
            if ((this.RegisterEMailLogItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterEMailLogItemCompleted(this, new RegisterEMailLogItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cli.det.nsw.edu.au/ns/WebServices/RegisterEMailLogValues", RequestNamespace="http://ws.cli.det.nsw.edu.au/ns/WebServices/", ResponseNamespace="http://ws.cli.det.nsw.edu.au/ns/WebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LogItem RegisterEMailLogValues(int applicationID, LogCategory category, LogSeverity severity, LogType logType, string machineName, string userName, string source, string message, string friendlyMessage, string fullDescription, System.DateTime createdDate, LogStatus status) {
            object[] results = this.Invoke("RegisterEMailLogValues", new object[] {
                        applicationID,
                        category,
                        severity,
                        logType,
                        machineName,
                        userName,
                        source,
                        message,
                        friendlyMessage,
                        fullDescription,
                        createdDate,
                        status});
            return ((LogItem)(results[0]));
        }
        
        /// <remarks/>
        public void RegisterEMailLogValuesAsync(int applicationID, LogCategory category, LogSeverity severity, LogType logType, string machineName, string userName, string source, string message, string friendlyMessage, string fullDescription, System.DateTime createdDate, LogStatus status) {
            this.RegisterEMailLogValuesAsync(applicationID, category, severity, logType, machineName, userName, source, message, friendlyMessage, fullDescription, createdDate, status, null);
        }
        
        /// <remarks/>
        public void RegisterEMailLogValuesAsync(int applicationID, LogCategory category, LogSeverity severity, LogType logType, string machineName, string userName, string source, string message, string friendlyMessage, string fullDescription, System.DateTime createdDate, LogStatus status, object userState) {
            if ((this.RegisterEMailLogValuesOperationCompleted == null)) {
                this.RegisterEMailLogValuesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterEMailLogValuesOperationCompleted);
            }
            this.InvokeAsync("RegisterEMailLogValues", new object[] {
                        applicationID,
                        category,
                        severity,
                        logType,
                        machineName,
                        userName,
                        source,
                        message,
                        friendlyMessage,
                        fullDescription,
                        createdDate,
                        status}, this.RegisterEMailLogValuesOperationCompleted, userState);
        }
        
        private void OnRegisterEMailLogValuesOperationCompleted(object arg) {
            if ((this.RegisterEMailLogValuesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterEMailLogValuesCompleted(this, new RegisterEMailLogValuesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cli.det.nsw.edu.au/ns/WebServices/GetDBLogItemList", RequestNamespace="http://ws.cli.det.nsw.edu.au/ns/WebServices/", ResponseNamespace="http://ws.cli.det.nsw.edu.au/ns/WebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LogItem[] GetDBLogItemList(LogSearchArgument arg, int startRecord, int maxRecords) {
            object[] results = this.Invoke("GetDBLogItemList", new object[] {
                        arg,
                        startRecord,
                        maxRecords});
            return ((LogItem[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDBLogItemListAsync(LogSearchArgument arg, int startRecord, int maxRecords) {
            this.GetDBLogItemListAsync(arg, startRecord, maxRecords, null);
        }
        
        /// <remarks/>
        public void GetDBLogItemListAsync(LogSearchArgument arg, int startRecord, int maxRecords, object userState) {
            if ((this.GetDBLogItemListOperationCompleted == null)) {
                this.GetDBLogItemListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDBLogItemListOperationCompleted);
            }
            this.InvokeAsync("GetDBLogItemList", new object[] {
                        arg,
                        startRecord,
                        maxRecords}, this.GetDBLogItemListOperationCompleted, userState);
        }
        
        private void OnGetDBLogItemListOperationCompleted(object arg) {
            if ((this.GetDBLogItemListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDBLogItemListCompleted(this, new GetDBLogItemListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cli.det.nsw.edu.au/ns/WebServices/GetDBLogByLogId", RequestNamespace="http://ws.cli.det.nsw.edu.au/ns/WebServices/", ResponseNamespace="http://ws.cli.det.nsw.edu.au/ns/WebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LogItem GetDBLogByLogId(int logID) {
            object[] results = this.Invoke("GetDBLogByLogId", new object[] {
                        logID});
            return ((LogItem)(results[0]));
        }
        
        /// <remarks/>
        public void GetDBLogByLogIdAsync(int logID) {
            this.GetDBLogByLogIdAsync(logID, null);
        }
        
        /// <remarks/>
        public void GetDBLogByLogIdAsync(int logID, object userState) {
            if ((this.GetDBLogByLogIdOperationCompleted == null)) {
                this.GetDBLogByLogIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDBLogByLogIdOperationCompleted);
            }
            this.InvokeAsync("GetDBLogByLogId", new object[] {
                        logID}, this.GetDBLogByLogIdOperationCompleted, userState);
        }
        
        private void OnGetDBLogByLogIdOperationCompleted(object arg) {
            if ((this.GetDBLogByLogIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDBLogByLogIdCompleted(this, new GetDBLogByLogIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2117.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.cli.det.nsw.edu.au/ns/WebServices/")]
    public partial class LogItem {
        
        private LogType logTypeField;
        
        private int logIDField;
        
        private int applicationIDField;
        
        private LogCategory categoryField;
        
        private LogSeverity severityField;
        
        private string machineNameField;
        
        private string userNameField;
        
        private string sourceField;
        
        private string messageField;
        
        private string customCategoryField;
        
        private string friendlyMessageField;
        
        private string fullDescriptionField;
        
        private System.DateTime createdDateField;
        
        private LogStatus statusField;
        
        private string titleField;
        
        /// <remarks/>
        public LogType LogType {
            get {
                return this.logTypeField;
            }
            set {
                this.logTypeField = value;
            }
        }
        
        /// <remarks/>
        public int LogID {
            get {
                return this.logIDField;
            }
            set {
                this.logIDField = value;
            }
        }
        
        /// <remarks/>
        public int ApplicationID {
            get {
                return this.applicationIDField;
            }
            set {
                this.applicationIDField = value;
            }
        }
        
        /// <remarks/>
        public LogCategory Category {
            get {
                return this.categoryField;
            }
            set {
                this.categoryField = value;
            }
        }
        
        /// <remarks/>
        public LogSeverity Severity {
            get {
                return this.severityField;
            }
            set {
                this.severityField = value;
            }
        }
        
        /// <remarks/>
        public string MachineName {
            get {
                return this.machineNameField;
            }
            set {
                this.machineNameField = value;
            }
        }
        
        /// <remarks/>
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
        
        /// <remarks/>
        public string Source {
            get {
                return this.sourceField;
            }
            set {
                this.sourceField = value;
            }
        }
        
        /// <remarks/>
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
        
        /// <remarks/>
        public string CustomCategory {
            get {
                return this.customCategoryField;
            }
            set {
                this.customCategoryField = value;
            }
        }
        
        /// <remarks/>
        public string FriendlyMessage {
            get {
                return this.friendlyMessageField;
            }
            set {
                this.friendlyMessageField = value;
            }
        }
        
        /// <remarks/>
        public string FullDescription {
            get {
                return this.fullDescriptionField;
            }
            set {
                this.fullDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime CreatedDate {
            get {
                return this.createdDateField;
            }
            set {
                this.createdDateField = value;
            }
        }
        
        /// <remarks/>
        public LogStatus Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2117.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.cli.det.nsw.edu.au/ns/WebServices/")]
    public enum LogType {
        
        /// <remarks/>
        Event,
        
        /// <remarks/>
        Error,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2117.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.cli.det.nsw.edu.au/ns/WebServices/")]
    public enum LogCategory {
        
        /// <remarks/>
        Database,
        
        /// <remarks/>
        DataLayer,
        
        /// <remarks/>
        BusinessLayer,
        
        /// <remarks/>
        UI,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2117.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.cli.det.nsw.edu.au/ns/WebServices/")]
    public enum LogSeverity {
        
        /// <remarks/>
        Low,
        
        /// <remarks/>
        Medium,
        
        /// <remarks/>
        High,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2117.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.cli.det.nsw.edu.au/ns/WebServices/")]
    public enum LogStatus {
        
        /// <remarks/>
        NA,
        
        /// <remarks/>
        Success,
        
        /// <remarks/>
        Fail,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2117.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.cli.det.nsw.edu.au/ns/WebServices/")]
    public partial class LogSearchArgument {
        
        private System.Nullable<int> applicationIDField;
        
        private System.Nullable<LogSeverity> severityField;
        
        private System.Nullable<LogType> logTypeField;
        
        private System.Nullable<LogCategory> categoryField;
        
        private System.Nullable<LogStatus> statusField;
        
        private string machineNameField;
        
        private string sourceField;
        
        private string keywordField;
        
        private string customCategoryField;
        
        private string fullDescriptionField;
        
        private System.Nullable<System.DateTime> startCreatedDateField;
        
        private System.Nullable<System.DateTime> endCreatedDateField;
        
        private string userNameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> ApplicationID {
            get {
                return this.applicationIDField;
            }
            set {
                this.applicationIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<LogSeverity> Severity {
            get {
                return this.severityField;
            }
            set {
                this.severityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<LogType> LogType {
            get {
                return this.logTypeField;
            }
            set {
                this.logTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<LogCategory> Category {
            get {
                return this.categoryField;
            }
            set {
                this.categoryField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<LogStatus> Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public string MachineName {
            get {
                return this.machineNameField;
            }
            set {
                this.machineNameField = value;
            }
        }
        
        /// <remarks/>
        public string Source {
            get {
                return this.sourceField;
            }
            set {
                this.sourceField = value;
            }
        }
        
        /// <remarks/>
        public string Keyword {
            get {
                return this.keywordField;
            }
            set {
                this.keywordField = value;
            }
        }
        
        /// <remarks/>
        public string CustomCategory {
            get {
                return this.customCategoryField;
            }
            set {
                this.customCategoryField = value;
            }
        }
        
        /// <remarks/>
        public string FullDescription {
            get {
                return this.fullDescriptionField;
            }
            set {
                this.fullDescriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> StartCreatedDate {
            get {
                return this.startCreatedDateField;
            }
            set {
                this.startCreatedDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> EndCreatedDate {
            get {
                return this.endCreatedDateField;
            }
            set {
                this.endCreatedDateField = value;
            }
        }
        
        /// <remarks/>
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void RegisterDBLogItemCompletedEventHandler(object sender, RegisterDBLogItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RegisterDBLogItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RegisterDBLogItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LogItem Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LogItem)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void RegisterDBLogItemValuesCompletedEventHandler(object sender, RegisterDBLogItemValuesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RegisterDBLogItemValuesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RegisterDBLogItemValuesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LogItem Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LogItem)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void RegisterDBLogItemValuesWithCustomCategoryCompletedEventHandler(object sender, RegisterDBLogItemValuesWithCustomCategoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RegisterDBLogItemValuesWithCustomCategoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RegisterDBLogItemValuesWithCustomCategoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LogItem Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LogItem)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void RegisterEMailLogItemCompletedEventHandler(object sender, RegisterEMailLogItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RegisterEMailLogItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RegisterEMailLogItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LogItem Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LogItem)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void RegisterEMailLogValuesCompletedEventHandler(object sender, RegisterEMailLogValuesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RegisterEMailLogValuesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RegisterEMailLogValuesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LogItem Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LogItem)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetDBLogItemListCompletedEventHandler(object sender, GetDBLogItemListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDBLogItemListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDBLogItemListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LogItem[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LogItem[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetDBLogByLogIdCompletedEventHandler(object sender, GetDBLogByLogIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDBLogByLogIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDBLogByLogIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LogItem Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LogItem)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591