@model Executive
@{
    var user = ViewBagWrapper.UserInfoExtensionBag.GetCurrentUser(ViewData);
    var task = ViewBagWrapper.TaskBag.GetCurrentTask(ViewData);
    var formMethod = ViewBagWrapper.FormOperations.GetFormMethod(ViewData);

    var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
    var requestType = ViewBagWrapper.FormOperations.GetRequestType(ViewData);
    var statusValueItems = ViewBagWrapper.ListBag.GetList("statusValueItems", ViewData);

}

@Html.AntiForgeryToken()

<div class="form-group @GetFormGroupClass("ExecutiveCod")">
    <label for="ExecutiveCod" class="col-lg-4">@Html.DisplayNameFor(model => model.ExecutiveCod) <span class="mandatory">*</span></label>

    <input type="text" name="ExecutiveCod" id="ExecutiveCod" class="form-control col-lg-8" placeholder="e.g. Executive cod" value="@Model.ExecutiveCod" @ReadOnly("ExecutiveCod") required data-fv-notempty-message='The Executive cod is required' />


</div>


<div class="form-group @GetFormGroupClass("ExecutiveTitle")">
    <label for="ExecutiveTitle" class="col-lg-4">@Html.DisplayNameFor(model => model.ExecutiveTitle) <span class="mandatory">*</span></label>

    <textarea name="ExecutiveTitle" id="ExecutiveTitle" class="form-control col-lg-8 " placeholder="e.g. Executive title" required data-fv-notempty-message='The Executive title is required'>@Model.ExecutiveTitle</textarea>


</div>

<div class="form-group @GetFormGroupClass("ExecutiveDescription")">
    <label for="ExecutiveDescription" class="col-lg-4">@Html.DisplayNameFor(model => model.ExecutiveDescription) </label>

    <textarea name="ExecutiveDescription" id="ExecutiveDescription" class="form-control col-lg-8 tinymce tinymce-simple" placeholder="e.g. Executive description">@Html.Raw(Model.ExecutiveDescription)</textarea>


</div>


<div class="form-group @GetFormGroupClass("DefaultExecutiveOverview")">
    <label for="ExecutiveDescription" class="col-lg-4">@Html.DisplayNameFor(model => model.DefaultExecutiveOverview) </label>
    <textarea name="DefaultExecutiveOverview" id="DefaultExecutiveOverview" class="form-control col-lg-8 tinymce tinymce-simple" placeholder="e.g. Overview">@Html.Raw(Model.DefaultExecutiveOverview)</textarea>

</div>

<div class="form-group @GetFormGroupClass("CustomClass")">
    <label for="CustomClass" class="col-lg-4">@Html.DisplayNameFor(model => model.CustomClass) </label>

    <input type="text" name="CustomClass" id="CustomClass" class="form-control col-lg-8" placeholder="e.g. CustomClass" value="@Model.CustomClass" @ReadOnly("CustomClass") />

</div>



<div class="form-group @GetFormGroupClass("StatusId")">
    <label for="StatusId" class="col-lg-4">Status <span class="mandatory">*</span></label>

    @Html.DropDownList("StatusId", statusValueItems, "Select Status value ...", new { id = "StatusId", @class = "form-control col-lg-8 select2picker", Required = "Required" })

</div>
@functions
{
    bool IsKey(string propertyName) {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        return T4Helper.GetKeys(entityType).Any(p => p.Name == propertyName);
    }

    string ReadOnly(string propertyName) {
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        if (formType == FormType.Edit && IsKey(propertyName)) return "readonly";

        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);

        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>(prop, entityType);
        if (computedAttribute == null) return string.Empty;

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "readonly";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "readonly";

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "readonly";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "readonly";

        return string.Empty;
    }

    string GetFormGroupClass(string propertyName) {
        var entityType = ViewBagWrapper.EntityInfo.GetEntityType(ViewData);
        var formType = ViewBagWrapper.FormOperations.GetFormType(ViewData);
        var prop = T4Helper.GetProperty(propertyName, entityType);
        var computedAttribute = T4Helper.MetadataOperations.GetMetadataPropertyCustomAttribute<ComputedPropertyAttribute>(prop, entityType);
        if (computedAttribute == null) return string.Empty;

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedDate) return "hidden";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.LastModifiedUser) return "hidden";

        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreationDate) return "hidden";
        if (computedAttribute.ComputedPropertyType == ComputedPropertyType.CreatedUser) return "hidden";

        switch (formType) {
            case FormType.Create: {
                    if (computedAttribute.ComputedPropertyType == ComputedPropertyType.Status) return "hidden";
                    if (computedAttribute.ComputedPropertyType == ComputedPropertyType.AutoIncrement) return "hidden";
                    if (computedAttribute.ComputedPropertyType == ComputedPropertyType.Computed) return "hidden";
                    break;
                }
        }
        return string.Empty;
    }
}
