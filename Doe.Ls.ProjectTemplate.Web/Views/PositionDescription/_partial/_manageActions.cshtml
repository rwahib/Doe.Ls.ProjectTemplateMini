@using Doe.Ls.ProjectTemplate.Core.BL.Workflow
@model PositionDescription
@{
    var task = ViewBagWrapper.TaskBag.GetCurrentTask(ViewData);
    var workflowEngine = ViewBagWrapper.WorkflowBag.GetWorkflowEngine(ViewData);

    var actions = workflowEngine.GetWorkflowObjectActions();
    var anyActions = false;
}

@if(Model != null && task.GetPositionPrivilege().CanCreate && !Model.IsDeleted())
    {
    <div class="col-lg">
        <p>
            <a href="@Url.Action("Create", "Position", new {rolePositionDescId = Model.PositionDescriptionId})" class="btn btn-primary action-button">
                Create new position
            </a>
        </p>
    </div>

    }

<div id="manage-actions-formTab" class="card.card-body">

    @if(!Model.StatusValue.IsLive())
        {
        if(!workflowEngine.PositionRdPdTasks.IsValid())
            {
            <div class="row-fluid alert alert-warning">
                <span class="font-black">@Html.Partial("_partial/_msg", new Msg { Code = "PRDPD-TASKS-WARNING-1", Param = workflowEngine.WorkflowObject.WorkflowObjectType.ToString().Wordify().ToLower() })</span>

                <ul>
                    @foreach(var ptask in workflowEngine.PositionRdPdTasks.BuildTasks())
                        {
                        if(!string.IsNullOrWhiteSpace(ptask.RelativeUrl))
                            {
                            <li><a href="@Url.Action(ptask.Url, new {id = Model.PositionDescriptionId})">@ptask.Description</a></li>
                            }
                        else
                            {
                            <li><a href="@ptask.Url">@ptask.Description</a></li>

                            }
                        }
                </ul>
            </div>
            }
        else
            {
            <div class="row-fluid">
                <div class="col-lg-12">
                    <div class="alert alert-success black">
                        <strong>@Html.Partial("_partial/_msg", new Msg { Code = "PD-TASKS-CONFIRMATION-1", Param = Model.TitleGrade() })</strong>
                    </div>
                </div>
            </div>
            }
        }
    @if(!workflowEngine.PositionRdPdTasks.IsValid() && actions.Any())
        {
        <div class="row-fluid">
            <div class="col-lg-12 text-info ">
                <b>Or you may perform this action(s).</b>
            </div>
        </div>
        }


    <div class="row-fluid">
        @if(actions.Any())
            {
            foreach(var action in actions)
                {
                if(!NotImplemented(action))
                    {
                    anyActions = true;
                    <div class="row">
                        <div class="col-lg-3">
                            <p>
                                <a href="@Url.Action("GetWorkflowAction", new {wfObjectId = Model.PositionDescriptionId, objectType = (int) WorkflowObjectType.PositionDescription, action.ActionId})" 
                                   class="btn btn-primary action-button @GetPopupClass(action)" data-toggle="modal" data-target="#vlePluginModal" >
                                    @action.ActionName
                                </a>
                            </p>
                        </div>
                        <div class="col-lg-9">
                            <p>
                                <div class="alert alert-warning">
                                    <strong> @Html.Raw(action.GetFullDescription(Model.RolePositionDescription).Trim())</strong>
                                </div>
                            </p>
                        </div>
                    </div>
                    }
                }
            }
        @if(!anyActions)
            {
            <div class="col-lg-12">
                <p>
                    <div class="alert alert-warning">

                        <strong>No action Available </strong>
                    </div>
                </p>
            </div>
            }
    </div>

</div>

@functions
{

    bool NotImplemented(WorkflowAction action)
        {
        if(action == WorkflowAction.Archive
            ||
            action == WorkflowAction.CreateNewVersion

            ) return true;
        return false;
        }
    private string GetPopupClass(WorkflowAction action)
        {

        switch ((Enums.WorkflowActions) action.ActionId)
            {
            case Enums.WorkflowActions.Clone:
            return "clone-action-pop-up";

            case Enums.WorkflowActions.CreateNewVersion:
            return "version-action-pop-up";

            case Enums.WorkflowActions.MovePositions:
                return "move-positions-action-pop-up";

            default:
        return "action-pop-up";
        }

        }

}
